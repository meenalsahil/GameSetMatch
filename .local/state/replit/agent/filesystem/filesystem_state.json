{"file_contents":{"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/PlayerCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { MapPin, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface PlayerCardProps {\n  id: string;\n  name: string;\n  location: string;\n  ranking?: number;\n  specialization: string;\n  photoUrl?: string | null;\n}\n\nexport default function PlayerCard({\n  name,\n  location,\n  ranking,\n  specialization,\n  id,\n  photoUrl,\n}: PlayerCardProps) {\n  const initials = name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase();\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate transition-all\" data-testid={`card-player-${id}`}>\n      <div className=\"p-6 space-y-4\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"h-16 w-16\">\n            <AvatarImage src={photoUrl || undefined} />\n            <AvatarFallback className=\"bg-primary/10 text-primary text-lg\">\n              <User className=\"h-8 w-8\" />\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <h3 className=\"text-xl font-bold text-card-foreground mb-1\">{name}</h3>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              {ranking && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Rank #{ranking}\n                </Badge>\n              )}\n              <div className=\"flex items-center gap-1 text-muted-foreground text-sm\">\n                <MapPin className=\"h-3 w-3\" />\n                <span>{location}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"text-sm text-muted-foreground\">\n          Specialization: {specialization}\n        </div>\n\n        <Button asChild className=\"w-full\" data-testid={`button-sponsor-${id}`}>\n          <Link href={`/player/${id}`}>\n            View Profile\n          </Link>\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2064},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Hero() {\n  return (\n    <section className=\"relative w-full h-[90vh] flex items-center justify-center overflow-hidden bg-gradient-to-br from-primary/20 via-background to-primary/10\">\n      <div className=\"relative z-10 container mx-auto px-6 text-center\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          <h1 className=\"text-5xl md:text-7xl font-bold text-foreground leading-tight\">\n            Get Sponsored. Fuel Your Tennis Career.\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n            GameSetMatch is a new platform dedicated to connecting you with a global network of fans and sponsors. Create your profile for free and get ready for our official launch.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Button \n              asChild\n              size=\"lg\" \n              variant=\"default\"\n              className=\"text-lg h-12 px-8\"\n              data-testid=\"button-player-signup\"\n            >\n              <Link href=\"/signup/player\">\n                Create Your Player Profile\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button \n              asChild\n              size=\"lg\" \n              variant=\"outline\"\n              className=\"text-lg h-12 px-8\"\n              data-testid=\"button-how-it-works\"\n            >\n              <Link href=\"/how-it-works\">\n                Learn More\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1776},"client/src/components/FeaturedPlayers.tsx":{"content":"import PlayerCard from \"./PlayerCard\";\n\nconst players = [\n  {\n    id: \"1\",\n    name: \"Player A\",\n    location: \"Barcelona, Spain\",\n    ranking: 234,\n    specialization: \"Clay Court\",\n  },\n  {\n    id: \"2\",\n    name: \"Player B\",\n    location: \"Singapore\",\n    ranking: 187,\n    specialization: \"Hard Court\",\n  },\n  {\n    id: \"3\",\n    name: \"Player C\",\n    location: \"London, UK\",\n    ranking: 156,\n    specialization: \"Grass Court\",\n  },\n  {\n    id: \"4\",\n    name: \"Player D\",\n    location: \"Buenos Aires, Argentina\",\n    ranking: 298,\n    specialization: \"All Surface\",\n  },\n];\n\nexport default function FeaturedPlayers() {\n  return (\n    <section className=\"py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            Featured Players\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Support tennis players competing at ATP, Challenger, and ITF levels\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {players.map((player) => (\n            <PlayerCard key={player.id} {...player} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1300},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/SponsorshipNeedCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface SponsorshipNeedCardProps {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n  amount: number;\n  type: \"one-time\" | \"monthly\";\n}\n\nexport default function SponsorshipNeedCard({\n  icon: Icon,\n  title,\n  description,\n  amount,\n  type,\n}: SponsorshipNeedCardProps) {\n  return (\n    <Card className=\"p-6 hover-elevate transition-all\" data-testid={`card-sponsorship-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <div className=\"flex items-start gap-4\">\n        <div className=\"h-12 w-12 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n          <Icon className=\"h-6 w-6 text-primary\" />\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold text-card-foreground mb-1\">\n            {title}\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            {description}\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-2xl font-bold text-foreground\">\n                ${amount.toLocaleString()}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {type === \"monthly\" ? \"per month\" : \"one-time\"}\n              </p>\n            </div>\n            <Button size=\"sm\" data-testid={`button-contribute-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              Contribute\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1622},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/examples/HowItWorks.tsx":{"content":"import HowItWorks from \"../HowItWorks\";\n\nexport default function HowItWorksExample() {\n  return <HowItWorks />;\n}\n","size_bytes":114},"client/src/components/Header.tsx":{"content":"import { Trophy, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Header() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b backdrop-blur-md bg-background/80\">\n      <div className=\"container mx-auto px-6 h-16 flex items-center justify-between\">\n        <Link href=\"/\">\n          <div className=\"flex items-center gap-2 cursor-pointer hover-elevate active-elevate-2 rounded-md px-3 py-2\">\n            <Trophy className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-xl font-bold text-foreground\">\n              GameSetMatch\n            </span>\n          </div>\n        </Link>\n\n        <nav className=\"hidden md:flex items-center gap-6\">\n          <Link\n            href=\"/\"\n            className=\"text-sm font-medium text-foreground hover:text-primary transition-colors\"\n            data-testid=\"link-home\"\n          >\n            Home\n          </Link>\n          <Link\n            href=\"/players\"\n            className=\"text-sm font-medium text-foreground hover:text-primary transition-colors\"\n            data-testid=\"link-players\"\n          >\n            Browse Players\n          </Link>\n          <a\n            href=\"/#how-it-works\"\n            className=\"text-sm font-medium text-foreground hover:text-primary transition-colors\"\n            data-testid=\"link-how-it-works\"\n          >\n            How It Works\n          </a>\n        </nav>\n\n        <div className=\"flex items-center gap-2\">\n          {isAuthenticated ? (\n            <>\n              <Button\n                asChild\n                size=\"sm\"\n                variant=\"outline\"\n                data-testid=\"button-dashboard\"\n              >\n                <Link href=\"/dashboard\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Dashboard\n                </Link>\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                asChild\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-login\"\n              >\n                <Link href=\"/signin\">Sign In</Link>\n              </Button>\n              <Button asChild size=\"sm\" data-testid=\"button-get-started\">\n                <Link href=\"/signup/player\">Get Started</Link>\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2512},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/examples/SponsorshipNeedCard.tsx":{"content":"import SponsorshipNeedCard from \"../SponsorshipNeedCard\";\nimport { Plane } from \"lucide-react\";\n\nexport default function SponsorshipNeedCardExample() {\n  return (\n    <div className=\"p-8 max-w-lg\">\n      <SponsorshipNeedCard\n        icon={Plane}\n        title=\"Tournament Travel\"\n        description=\"Support travel costs for upcoming ATP Challenger events in Europe\"\n        amount={2500}\n        type=\"one-time\"\n      />\n    </div>\n  );\n}\n","size_bytes":441},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  boolean,\n  timestamp,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const players = pgTable(\"players\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  age: integer(\"age\").notNull(),\n  country: text(\"country\").notNull(),\n  location: text(\"location\").notNull(),\n  ranking: text(\"ranking\"),\n  specialization: text(\"specialization\").notNull(),\n  bio: text(\"bio\").notNull(),\n  fundingGoals: text(\"funding_goals\").notNull(),\n  videoUrl: text(\"video_url\"),\n  photoUrl: text(\"photo_url\"),\n  published: boolean(\"published\").notNull().default(false),\n  featured: boolean(\"featured\").notNull().default(false),\n  priority: text(\"priority\").default(\"normal\"),\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  approvalStatus: text(\"approval_status\").notNull().default(\"pending\"),\n  approvedBy: varchar(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  playerId: varchar(\"player_id\")\n    .notNull()\n    .references(() => players.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertPlayerSchema = createInsertSchema(players).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const signupPlayerSchema = insertPlayerSchema\n  .omit({\n    passwordHash: true,\n    published: true,\n    featured: true,\n    priority: true,\n    photoUrl: true,\n    isAdmin: true,\n    approvalStatus: true,\n    approvedBy: true,\n    approvedAt: true,\n  })\n  .extend({\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    age: z\n      .number()\n      .int()\n      .positive()\n      .min(13, \"You must be at least 13 years old\"),\n    country: z.string().min(1, \"Country is required\"),\n    fundingGoals: z\n      .string()\n      .min(10, \"Please describe your funding goals (at least 10 characters)\"),\n    videoUrl: z\n      .union([z.string().url(\"Please enter a valid URL\"), z.literal(\"\")])\n      .optional(),\n    atpProfileUrl: z.string().url().optional(), // ADD THIS\n    photo: z.any().optional(), // ADD THIS (file uploads aren't validated by zod)\n  });\n\nexport type InsertPlayer = z.infer<typeof insertPlayerSchema>;\nexport type Player = typeof players.$inferSelect;\nexport type SignupPlayer = z.infer<typeof signupPlayerSchema>;\n","size_bytes":2819},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/examples/Hero.tsx":{"content":"import Hero from \"../Hero\";\n\nexport default function HeroExample() {\n  return <Hero />;\n}\n","size_bytes":90},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/Home.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Trophy, Target, Users, ArrowRight, CheckCircle2 } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function HomePage() {\n  useEffect(() => {\n    // Smooth scroll to section if hash exists\n    const hash = window.location.hash;\n    if (hash) {\n      const element = document.querySelector(hash);\n      if (element) {\n        setTimeout(() => {\n          element.scrollIntoView({ behavior: \"smooth\" });\n        }, 100);\n      }\n    }\n  }, []);\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-gradient-to-br from-green-50 via-white to-blue-50 dark:from-green-950 dark:via-gray-900 dark:to-blue-950\">\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n        <div className=\"container mx-auto px-6 py-24 relative\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <div className=\"inline-flex items-center gap-2 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 px-4 py-2 rounded-full text-sm font-medium mb-6\">\n              <Trophy className=\"h-4 w-4\" />\n              Supporting Tennis Players Worldwide\n            </div>\n\n            <h1 className=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white mb-6 leading-tight\">\n              Connect Tennis Players\n              <br />\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-blue-600\">\n                with Sponsors\n              </span>\n            </h1>\n\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-10 max-w-2xl mx-auto\">\n              Support rising tennis stars from ATP to ITF tournaments. Help\n              players achieve their dreams with gear, travel, and training\n              funds.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\" className=\"text-lg px-8 py-6\" asChild>\n                <Link href=\"/players\">\n                  Browse Players\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Link>\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"text-lg px-8 py-6\"\n                asChild\n              >\n                <Link href=\"/signup/player\">I'm a Player</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n\n      {/* How It Works - For Players */}\n      <div id=\"how-it-works\" className=\"py-24 bg-white dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">How It Works</h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n              Get the support you need to compete at ATP, Challenger, and ITF\n              tournaments\n            </p>\n          </div>\n\n          <div className=\"mb-20\">\n            <h3 className=\"text-3xl font-bold text-center mb-12\">\n              For Players\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n              <Card className=\"border-2 hover:border-green-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-3xl font-bold text-green-600\">1</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4\">Sign Up</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    Create your player profile in minutes. It's free to join!\n                  </p>\n                  <ul className=\"text-left text-sm text-gray-600 dark:text-gray-400 space-y-2\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Share your tennis journey</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Upload match videos</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 hover:border-green-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-3xl font-bold text-blue-600\">2</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4\">\n                    Build Your Profile\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    Showcase your achievements, ranking, and funding goals\n                  </p>\n                  <ul className=\"text-left text-sm text-gray-600 dark:text-gray-400 space-y-2\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Tournament results</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Training needs</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 hover:border-green-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-purple-100 dark:bg-purple-900/30 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <span className=\"text-3xl font-bold text-purple-600\">\n                      3\n                    </span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4\">Get Sponsored</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    Connect with sponsors who want to support your tennis\n                    journey\n                  </p>\n                  <ul className=\"text-left text-sm text-gray-600 dark:text-gray-400 space-y-2\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Travel & gear funding</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n                      <span>Monthly stipends</span>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"text-center mt-12\">\n              <Button size=\"lg\" className=\"text-lg\" asChild>\n                <Link href=\"/signup/player\">Get Started as Player</Link>\n              </Button>\n            </div>\n          </div>\n\n          {/* For Sponsors */}\n          <div>\n            <h3 className=\"text-3xl font-bold text-center mb-12\">\n              For Sponsors\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n              <Card className=\"border-2 hover:border-blue-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <Users className=\"h-12 w-12 text-blue-600 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold mb-3\">Browse Players</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    Discover talented tennis players at all competitive levels\n                    and find the right fit\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 hover:border-blue-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <Target className=\"h-12 w-12 text-blue-600 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold mb-3\">Choose a Player</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    Review profiles, equipment needs, and sponsorship goals to\n                    find your match\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2 hover:border-blue-500 transition-all hover:shadow-lg\">\n                <CardContent className=\"p-8 text-center\">\n                  <Trophy className=\"h-12 w-12 text-blue-600 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-bold mb-3\">Make an Impact</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    Contribute with travel support, gear, or stipends and help\n                    athletes achieve goals\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9680},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/routes.ts":{"content":"import express, {\n  type Express,\n  type Request,\n  Response,\n  NextFunction,\n} from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage as dbStorage } from \"./storage\"; // RENAMED TO AVOID CONFLICT\nimport { signupPlayerSchema, type Player } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { randomUUID } from \"crypto\";\nimport nodemailer from \"nodemailer\";\n\n// Create uploads directory if it doesn't exist\nif (!fs.existsSync(\"./uploads\")) {\n  fs.mkdirSync(\"./uploads\");\n}\n\n// Configure multer for photo uploads\nconst multerStorage = multer.diskStorage({\n  // RENAMED FROM 'storage' TO 'multerStorage'\n  destination: \"./uploads\",\n  filename: (req, file, cb) => {\n    const uniqueName = `${Date.now()}-${Math.random().toString(36).substring(7)}${path.extname(file.originalname)}`;\n    cb(null, uniqueName);\n  },\n});\n\nconst upload = multer({\n  storage: multerStorage, // USE THE RENAMED VARIABLE\n  limits: { fileSize: 5 * 1024 * 1024 },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif/;\n    const extname = allowedTypes.test(\n      path.extname(file.originalname).toLowerCase(),\n    );\n    const mimetype = allowedTypes.test(file.mimetype);\n    if (extname && mimetype) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\"));\n    }\n  },\n});\n\n// Middleware to check authentication\nfunction isAuthenticated(req: Request, res: Response, next: NextFunction) {\n  if (req.session?.playerId) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n\nasync function isAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.playerId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const player = await dbStorage.getPlayer(req.session.playerId); // USE dbStorage\n\n  const isAdminUser = player?.is_admin || player?.isAdmin;\n\n  if (!player || !isAdminUser) {\n    return res\n      .status(403)\n      .json({ message: \"Forbidden - Admin access required\" });\n  }\n\n  req.user = player;\n  next();\n}\n\n// Configure multer for file uploads\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use(\"/uploads\", express.static(\"uploads\"));\n  // Auth routes\n  app.post(\"/api/auth/signup\", upload.single(\"photo\"), async (req, res) => {\n    try {\n      // Convert FormData strings to proper types\n      const parsedBody = {\n        ...req.body,\n        age: parseInt(req.body.age),\n        ranking: req.body.ranking ? parseInt(req.body.ranking) : undefined,\n      };\n\n      const result = signupPlayerSchema.safeParse(parsedBody);\n      if (!result.success) {\n        console.error(\"Validation errors:\", result.error.errors);\n        return res\n          .status(400)\n          .json({ message: \"Invalid input\", errors: result.error.errors });\n      }\n      const { email, password, atpProfileUrl, ...playerData } = result.data;\n\n      // Validate ATP URL if provided\n      if (atpProfileUrl) {\n        try {\n          const url = new URL(atpProfileUrl);\n          const validDomains = [\n            \"atptour.com\",\n            \"itftennis.com\",\n            \"wtatennis.com\",\n          ];\n          const isValid = validDomains.some((domain) =>\n            url.hostname.includes(domain),\n          );\n\n          if (!isValid) {\n            return res.status(400).json({\n              message:\n                \"ATP Profile URL must be from atptour.com, itftennis.com, or wtatennis.com\",\n            });\n          }\n        } catch (urlError) {\n          return res.status(400).json({\n            message: \"Invalid ATP Profile URL format\",\n          });\n        }\n      }\n\n      // Check if player already exists\n      const existingPlayer = await dbstorage.getPlayerByEmail(email);\n      if (existingPlayer) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Get photo URL from uploaded file\n      const photoUrl = req.file ? `/uploads/${req.file.filename}` : null;\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Create player with photo and ATP URL\n      const player = await dbstorage.createPlayer({\n        ...playerData,\n        email,\n        passwordHash,\n        photoUrl,\n        atpProfileUrl: atpProfileUrl || null,\n        published: false,\n        featured: false,\n        priority: \"normal\",\n      });\n\n      // Set session\n      req.session!.playerId = player.id;\n      res.json({ player: { ...player, passwordHash: undefined } });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    console.log(\"=== SIGNIN ROUTE HIT ===\");\n    console.log(\"Request body:\", req.body);\n    try {\n      const { email, password } = req.body;\n      const player = await dbstorage.getPlayerByEmail(email);\n\n      console.log(\"/api/auth/signin - Player data:\", player);\n\n      if (!player) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const passwordHash = player.password_hash || player.passwordHash;\n\n      if (!passwordHash) {\n        console.error(\"No password hash found for player\");\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, passwordHash);\n\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Set session and wait for it to save\n      req.session!.playerId = player.id;\n\n      try {\n        await new Promise<void>((resolve, reject) => {\n          req.session.save((err) => {\n            if (err) {\n              console.error(\"Session save error:\", err);\n              reject(err);\n            } else {\n              console.log(\"Session saved successfully, ID:\", req.sessionID);\n              resolve();\n            }\n          });\n        });\n      } catch (saveError) {\n        console.error(\"Failed to save session:\", saveError);\n        return res.status(500).json({ message: \"Failed to create session\" });\n      }\n\n      // Wait a tiny bit for database to commit\n      await new Promise((resolve) => setTimeout(resolve, 200));\n\n      // Return player data with camelCase for frontend\n      const playerData = {\n        id: player.id,\n        email: player.email,\n        fullName: player.full_name,\n        age: player.age,\n        country: player.country,\n        location: player.location,\n        ranking: player.ranking,\n        specialization: player.specialization,\n        bio: player.bio,\n        fundingGoals: player.funding_goals,\n        videoUrl: player.video_url,\n        photoUrl: player.photo_url,\n        published: player.published,\n        featured: player.featured,\n        priority: player.priority,\n        isAdmin: player.is_admin,\n        approvalStatus: player.approval_status,\n        approvedBy: player.approved_by,\n        approvedAt: player.approved_at,\n        createdAt: player.created_at,\n      };\n\n      console.log(\"Sending response with player data\");\n      res.json({ player: playerData });\n    } catch (error) {\n      console.error(\"Signin error:\", error);\n      res.status(500).json({ message: \"Failed to sign in\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session?.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.clearCookie(\"connect.sid\");\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/test-session\", (req, res) => {\n    console.log(\"TEST SESSION:\", req.session);\n    res.json({\n      hasSession: !!req.session,\n      hasPlayerId: !!req.session?.playerId,\n      playerId: req.session?.playerId,\n      sessionID: req.sessionID,\n      cookies: req.headers.cookie,\n    });\n  });\n\n  app.get(\"/api/auth/me\", isAuthenticated, async (req, res) => {\n    try {\n      // ADD THESE HEADERS to prevent caching\n      res.setHeader(\n        \"Cache-Control\",\n        \"no-store, no-cache, must-revalidate, private\",\n      );\n      res.setHeader(\"Pragma\", \"no-cache\");\n      res.setHeader(\"Expires\", \"0\");\n\n      console.log(\"/api/auth/me - Session:\", req.session);\n      const player = await dbstorage.getPlayer(req.session!.playerId!);\n      console.log(\"/api/auth/me - Player data:\", player);\n\n      if (!player) {\n        console.log(\"/api/auth/me - Player not found\");\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n\n      const playerData = {\n        id: player.id,\n        email: player.email,\n        fullName: player.full_name,\n        age: player.age,\n        country: player.country,\n        location: player.location,\n        ranking: player.ranking,\n        specialization: player.specialization,\n        bio: player.bio,\n        fundingGoals: player.funding_goals,\n        videoUrl: player.video_url,\n        photoUrl: player.photo_url,\n        published: player.published,\n        featured: player.featured,\n        priority: player.priority,\n        isAdmin: player.is_admin,\n        approvalStatus: player.approval_status,\n        approvedBy: player.approved_by,\n        approvedAt: player.approved_at,\n        createdAt: player.created_at,\n      };\n\n      console.log(\"/api/auth/me - isAdmin:\", playerData.isAdmin);\n      res.json(playerData);\n    } catch (error) {\n      console.error(\"/api/auth/me - Get current player error:\", error);\n      res.status(500).json({ message: \"Failed to get player\" });\n    }\n  });\n\n  // Player routes\n  app.get(\"/api/players\", async (req, res) => {\n    try {\n      const players = await dbstorage.getPublishedPlayers();\n\n      // Transform snake_case to camelCase\n      const transformedPlayers = players.map((p) => ({\n        id: p.id,\n        fullName: p.full_name,\n        location: p.location,\n        ranking: p.ranking,\n        specialization: p.specialization,\n        bio: p.bio,\n        fundingGoals: p.funding_goals,\n        videoUrl: p.video_url,\n        photoUrl: p.photo_url,\n        country: p.country,\n        age: p.age,\n      }));\n\n      res.json(transformedPlayers);\n    } catch (error) {\n      console.error(\"Get players error:\", error);\n      res.status(500).json({ message: \"Failed to get players\" });\n    }\n  });\n\n  app.get(\"/api/players/featured\", async (req, res) => {\n    try {\n      const players = await dbstorage.getFeaturedPlayers();\n      res.json(players.map((p) => ({ ...p, passwordHash: undefined })));\n    } catch (error) {\n      console.error(\"Get featured players error:\", error);\n      res.status(500).json({ message: \"Failed to get featured players\" });\n    }\n  });\n\n  app.get(\"/api/players/:id\", async (req, res) => {\n    try {\n      const player = await dbstorage.getPlayer(req.params.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n\n      const playerData = {\n        id: player.id,\n        fullName: player.full_name,\n        age: player.age,\n        country: player.country,\n        location: player.location,\n        ranking: player.ranking,\n        specialization: player.specialization,\n        bio: player.bio,\n        fundingGoals: player.funding_goals,\n        videoUrl: player.video_url,\n        photoUrl: player.photo_url,\n        published: player.published,\n        featured: player.featured,\n      };\n      res.json(playerData);\n    } catch (error) {\n      console.error(\"Get player error:\", error);\n      res.status(500).json({ message: \"Failed to get player\" });\n    }\n  });\n  app.post(\"/api/players/toggle-active\", isAuthenticated, async (req, res) => {\n    try {\n      const player = await dbstorage.getPlayer(req.session!.playerId!);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n\n      const updatedPlayer = player.active\n        ? await dbstorage.deactivatePlayer(player.id)\n        : await dbstorage.activatePlayer(player.id);\n\n      res.json(updatedPlayer);\n    } catch (error) {\n      console.error(\"Toggle active error:\", error);\n      res.status(500).json({ message: \"Failed to update status\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/players\", isAdmin, async (req, res) => {\n    try {\n      const players = await dbstorage.getAllPlayers();\n      const transformedPlayers = players.map((p) => ({\n        id: p.id,\n        email: p.email,\n        fullName: p.full_name,\n        age: p.age,\n        country: p.country,\n        location: p.location,\n        ranking: p.ranking,\n        specialization: p.specialization,\n        bio: p.bio,\n        fundingGoals: p.funding_goals,\n        videoUrl: p.video_url,\n        photoUrl: p.photo_url,\n        published: p.published,\n        featured: p.featured,\n        priority: p.priority,\n        isAdmin: p.is_admin,\n        approvalStatus: p.approval_status,\n        approvedBy: p.approved_by,\n        approvedAt: p.approved_at,\n        createdAt: p.created_at,\n        active: p.active, // ADD THIS LINE\n      }));\n      res.json(transformedPlayers);\n    } catch (error) {\n      console.error(\"Get admin players error:\", error);\n      res.status(500).json({ message: \"Failed to get players\" });\n    }\n  });\n\n  app.post(\"/api/admin/players/:id/approve\", isAdmin, async (req, res) => {\n    try {\n      const player = await dbstorage.approvePlayer(req.params.id, req.user!.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ ...player, password_hash: undefined });\n    } catch (error) {\n      console.error(\"Approve player error:\", error);\n      res.status(500).json({ message: \"Failed to approve player\" });\n    }\n  });\n\n  app.post(\"/api/admin/players/:id/reject\", isAdmin, async (req, res) => {\n    try {\n      const player = await dbstorage.rejectPlayer(req.params.id, req.user!.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ ...player, password_hash: undefined });\n    } catch (error) {\n      console.error(\"Reject player error:\", error);\n      res.status(500).json({ message: \"Failed to reject player\" });\n    }\n  });\n  app.post(\"/api/admin/players/:id/deactivate\", isAdmin, async (req, res) => {\n    try {\n      const player = await dbstorage.deactivatePlayer(req.params.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ message: \"Player deactivated\", player });\n    } catch (error) {\n      console.error(\"Deactivate player error:\", error);\n      res.status(500).json({ message: \"Failed to deactivate player\" });\n    }\n  });\n  app.post(\"/api/admin/players/:id/activate\", isAdmin, async (req, res) => {\n    try {\n      const player = await dbstorage.activatePlayer(req.params.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ message: \"Player activated\", player });\n    } catch (error) {\n      console.error(\"Activate player error:\", error);\n      res.status(500).json({ message: \"Failed to activate player\" });\n    }\n  });\n  app.delete(\"/api/admin/players/:id\", isAdmin, async (req, res) => {\n    try {\n      await dbstorage.deletePlayer(req.params.id);\n      res.json({ message: \"Player deleted\" });\n    } catch (error) {\n      console.error(\"Delete player error:\", error);\n      res.status(500).json({ message: \"Failed to delete player\" });\n    }\n  });\n  app.patch(\"/api/players/:id\", isAuthenticated, async (req, res) => {\n    try {\n      // Ensure player can only update their own profile\n      if (req.session!.playerId !== req.params.id) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const player = await dbstorage.updatePlayer(req.params.id, req.body);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ ...player, passwordHash: undefined });\n    } catch (error) {\n      console.error(\"Update player error:\", error);\n      res.status(500).json({ message: \"Failed to update player\" });\n    }\n  });\n\n  app.post(\"/api/players/:id/publish\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.session!.playerId !== req.params.id) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const player = await dbstorage.publishPlayer(req.params.id);\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n      res.json({ ...player, passwordHash: undefined });\n    } catch (error) {\n      console.error(\"Publish player error:\", error);\n      res.status(500).json({ message: \"Failed to publish player\" });\n    }\n  });\n\n  app.post(\n    \"/api/upload/photo\",\n    isAuthenticated,\n    upload.single(\"photo\"),\n    async (req, res) => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ message: \"No file uploaded\" });\n        }\n\n        const photoUrl = `/uploads/${req.file.filename}`;\n\n        // Update player's photo\n        if (req.session?.playerId) {\n          await dbstorage.updatePlayer(req.session.playerId, { photoUrl });\n        }\n\n        res.json({ photoUrl });\n      } catch (error) {\n        console.error(\"Upload photo error:\", error);\n        res.status(500).json({ message: \"Failed to upload photo\" });\n      }\n    },\n  );\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { name, email, phone, message } = req.body;\n\n      if (!name || !email || !message) {\n        return res\n          .status(400)\n          .json({ message: \"Name, email, and message are required\" });\n      }\n\n      // Check if email credentials are configured\n      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {\n        console.error(\"Email credentials not configured\");\n        return res.status(500).json({\n          message:\n            \"Email service is not configured. Please contact the administrator.\",\n        });\n      }\n\n      // Create email transporter\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.EMAIL_USER,\n          pass: process.env.EMAIL_PASS,\n        },\n      });\n\n      // Email content\n      const mailOptions = {\n        from: process.env.EMAIL_USER,\n        to: \"suvirabeer@gmail.com\",\n        subject: `GameSetMatch Contact Form: ${name}`,\n        html: `\n          <h2>New Contact Form Submission</h2>\n          <p><strong>Name:</strong> ${name}</p>\n          <p><strong>Email:</strong> ${email}</p>\n          <p><strong>Phone:</strong> ${phone || \"Not provided\"}</p>\n          <p><strong>Message:</strong></p>\n          <p>${message}</p>\n          <hr>\n          <p><em>Reply to: ${email}</em></p>\n        `,\n      };\n\n      // Send email\n      await transporter.sendMail(mailOptions);\n\n      res.json({ message: \"Message sent successfully\" });\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/players\", isAdmin, async (req, res) => {\n    try {\n      const players = await dbstorage.getAllPlayers();\n\n      // Transform snake_case to camelCase for frontend\n      const transformedPlayers = players.map((p) => ({\n        id: p.id,\n        email: p.email,\n        fullName: p.full_name,\n        age: p.age,\n        country: p.country,\n        location: p.location,\n        ranking: p.ranking,\n        specialization: p.specialization,\n        bio: p.bio,\n        fundingGoals: p.funding_goals,\n        videoUrl: p.video_url,\n        photoUrl: p.photo_url,\n        published: p.published,\n        featured: p.featured,\n        priority: p.priority,\n        isAdmin: p.is_admin,\n        approvalStatus: p.approval_status,\n        approvedBy: p.approved_by,\n        approvedAt: p.approved_at,\n        createdAt: p.created_at,\n      }));\n\n      res.json(transformedPlayers);\n    } catch (error) {\n      console.error(\"Get admin players error:\", error);\n      res.status(500).json({ message: \"Failed to get players\" });\n    }\n  });\n\n  app.delete(\"/api/admin/players/:id\", isAdmin, async (req, res) => {\n    try {\n      // Prevent admins from deleting themselves\n      if (req.params.id === req.session!.playerId) {\n        return res\n          .status(403)\n          .json({ message: \"You cannot delete your own account\" });\n      }\n\n      await dbstorage.deletePlayer(req.params.id);\n      res.json({ message: \"Player deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete player error:\", error);\n      res.status(500).json({ message: \"Failed to delete player\" });\n    }\n  });\n\n  app.post(\"/api/admin/players/:id/approve\", isAdmin, async (req, res) => {\n    try {\n      const adminId = req.session!.playerId!;\n      const player = await dbstorage.approvePlayer(req.params.id, adminId);\n\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n\n      // Send approval email\n      if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {\n        try {\n          const transporter = nodemailer.createTransport({\n            service: \"gmail\",\n            auth: {\n              user: process.env.EMAIL_USER,\n              pass: process.env.EMAIL_PASS,\n            },\n          });\n\n          await transporter.sendMail({\n            from: process.env.EMAIL_USER,\n            to: player.email,\n            subject: \"Your GameSetMatch Application Has Been Approved!\",\n            html: `\n              <h2>Congratulations, ${player.fullName}!</h2>\n              <p>Your application to join GameSetMatch has been approved!</p>\n              <p>You can now complete your profile and publish it to start connecting with sponsors.</p>\n              <p><a href=\"${req.protocol}://${req.get(\"host\")}/signin\">Sign in to your dashboard</a></p>\n              <br>\n              <p>Best regards,<br>The GameSetMatch Team</p>\n            `,\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send approval email:\", emailError);\n          // Don't fail the approval if email fails\n        }\n      }\n\n      res.json({ player: { ...player, passwordHash: undefined } });\n    } catch (error) {\n      console.error(\"Approve player error:\", error);\n      res.status(500).json({ message: \"Failed to approve player\" });\n    }\n  });\n\n  app.post(\"/api/admin/players/:id/reject\", isAdmin, async (req, res) => {\n    try {\n      const adminId = req.session!.playerId!;\n      const player = await dbstorage.rejectPlayer(req.params.id, adminId);\n\n      if (!player) {\n        return res.status(404).json({ message: \"Player not found\" });\n      }\n\n      // Send rejection email\n      if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {\n        try {\n          const transporter = nodemailer.createTransport({\n            service: \"gmail\",\n            auth: {\n              user: process.env.EMAIL_USER,\n              pass: process.env.EMAIL_PASS,\n            },\n          });\n\n          await transporter.sendMail({\n            from: process.env.EMAIL_USER,\n            to: player.email,\n            subject: \"Update on Your GameSetMatch Application\",\n            html: `\n              <h2>Hello ${player.fullName},</h2>\n              <p>Thank you for your interest in GameSetMatch.</p>\n              <p>After reviewing your application, we're unable to approve it at this time.</p>\n              <p>If you have questions or would like to reapply in the future, please contact us.</p>\n              <br>\n              <p>Best regards,<br>The GameSetMatch Team</p>\n            `,\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send rejection email:\", emailError);\n          // Don't fail the rejection if email fails\n        }\n      }\n\n      res.json({ player: { ...player, passwordHash: undefined } });\n    } catch (error) {\n      console.error(\"Reject player error:\", error);\n      res.status(500).json({ message: \"Failed to reject player\" });\n    }\n  });\n\n  // Password recovery routes\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      const player = await dbstorage.getPlayerByEmail(email);\n      if (!player) {\n        // Don't reveal if email exists\n        return res.json({\n          message:\n            \"If an account with that email exists, a password reset link has been sent.\",\n        });\n      }\n\n      // Generate reset token\n      const resetToken = randomUUID();\n      const expiresAt = new Date(Date.now() + 3600000); // 1 hour from now\n\n      await dbstorage.createPasswordResetToken(\n        player.id,\n        resetToken,\n        expiresAt,\n      );\n\n      // Send email\n      if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {\n        console.error(\"Email credentials not configured\");\n        return res\n          .status(500)\n          .json({ message: \"Email service is not configured\" });\n      }\n\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.EMAIL_USER,\n          pass: process.env.EMAIL_PASS,\n        },\n      });\n\n      const resetUrl = `${req.protocol}://${req.get(\"host\")}/reset-password?token=${resetToken}`;\n\n      await transporter.sendMail({\n        from: process.env.EMAIL_USER,\n        to: email,\n        subject: \"GameSetMatch - Password Reset Request\",\n        html: `\n          <h2>Password Reset Request</h2>\n          <p>Hi ${player.fullName},</p>\n          <p>You requested to reset your password. Click the link below to reset it:</p>\n          <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n          <p>This link will expire in 1 hour.</p>\n          <p>If you didn't request this, please ignore this email.</p>\n          <hr>\n          <p><em>GameSetMatch Team</em></p>\n        `,\n      });\n\n      res.json({\n        message:\n          \"If an account with that email exists, a password reset link has been sent.\",\n      });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res\n          .status(400)\n          .json({ message: \"Token and password are required\" });\n      }\n\n      if (password.length < 8) {\n        return res\n          .status(400)\n          .json({ message: \"Password must be at least 8 characters\" });\n      }\n\n      const resetToken = await dbstorage.getPasswordResetToken(token);\n      if (!resetToken) {\n        return res\n          .status(400)\n          .json({ message: \"Invalid or expired reset token\" });\n      }\n\n      if (new Date() > resetToken.expiresAt) {\n        await dbstorage.deletePasswordResetToken(token);\n        return res.status(400).json({ message: \"Reset token has expired\" });\n      }\n\n      // Hash new password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Update player password\n      await dbstorage.updatePlayer(resetToken.playerId, { passwordHash });\n\n      // Delete used token\n      await dbstorage.deletePasswordResetToken(token);\n\n      res.json({ message: \"Password reset successful\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27782},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/PlayerCard.tsx":{"content":"import PlayerCard from \"../PlayerCard\";\n\nexport default function PlayerCardExample() {\n  return (\n    <div className=\"p-8 max-w-sm\">\n      <PlayerCard\n        id=\"demo\"\n        name=\"Player A\"\n        location=\"Barcelona, Spain\"\n        ranking={234}\n        specialization=\"Clay Court\"\n      />\n    </div>\n  );\n}\n","size_bytes":314},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 9% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 220 9% 93%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 220 9% 90%;\n\n  --sidebar-primary: 142 76% 36%;\n\n  --sidebar-primary-foreground: 142 76% 98%;\n\n  --sidebar-accent: 220 9% 92%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 142 76% 36%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 220 9% 93%;\n\n  --primary: 142 76% 36%;\n\n  --primary-foreground: 142 76% 98%;\n\n  --secondary: 220 9% 94%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 220 9% 95%;\n\n  --muted-foreground: 220 9% 40%;\n\n  --accent: 220 9% 94%;\n\n  --accent-foreground: 220 13% 18%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 142 76% 36%;\n  --chart-1: 142 76% 36%;\n  --chart-2: 25 95% 53%;\n  --chart-3: 217 91% 60%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 0 84% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -2px hsl(220 13% 18% / 0.08);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 18% / 0.10), 0px 3px 7px -3px hsl(220 13% 18% / 0.10);\n  --shadow-lg: 0px 10px 20px -3px hsl(220 13% 18% / 0.12), 0px 4px 10px -4px hsl(220 13% 18% / 0.10);\n  --shadow-xl: 0px 20px 30px -5px hsl(220 13% 18% / 0.15), 0px 8px 15px -6px hsl(220 13% 18% / 0.12);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 18% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 10%;\n\n  --foreground: 220 13% 91%;\n\n  --border: 220 13% 20%;\n\n  --card: 220 13% 14%;\n\n  --card-foreground: 220 13% 91%;\n\n  --card-border: 220 13% 18%;\n\n  --sidebar: 220 13% 12%;\n\n  --sidebar-foreground: 220 13% 91%;\n\n  --sidebar-border: 220 13% 16%;\n\n  --sidebar-primary: 142 60% 45%;\n\n  --sidebar-primary-foreground: 142 60% 98%;\n\n  --sidebar-accent: 220 13% 17%;\n\n  --sidebar-accent-foreground: 220 13% 91%;\n\n  --sidebar-ring: 142 60% 45%;\n\n  --popover: 220 13% 16%;\n\n  --popover-foreground: 220 13% 91%;\n\n  --popover-border: 220 13% 20%;\n\n  --primary: 142 60% 45%;\n\n  --primary-foreground: 142 60% 98%;\n\n  --secondary: 220 13% 19%;\n\n  --secondary-foreground: 220 13% 91%;\n\n  --muted: 220 13% 18%;\n\n  --muted-foreground: 220 13% 65%;\n\n  --accent: 220 13% 20%;\n\n  --accent-foreground: 220 13% 91%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 35%;\n  --ring: 142 60% 45%;\n  --chart-1: 142 60% 55%;\n  --chart-2: 25 95% 58%;\n  --chart-3: 217 91% 65%;\n  --chart-4: 38 92% 55%;\n  --chart-5: 0 84% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.22);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.28), 0px 2px 4px -2px hsl(0 0% 0% / 0.28);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 7px -3px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -3px hsl(0 0% 0% / 0.40), 0px 4px 10px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 30px -5px hsl(0 0% 0% / 0.50), 0px 8px 15px -6px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    position: relative;\n  }\n\n  /* Subtle tennis court-inspired background */\n  body::before {\n    content: \"\";\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n    background: \n      /* Subtle noise texture for depth */\n      linear-gradient(transparent 0%, transparent 100%),\n      /* Subtle diagonal lines mimicking court texture */\n      repeating-linear-gradient(\n        45deg,\n        transparent,\n        transparent 80px,\n        hsl(var(--background)) 80px,\n        hsl(var(--background)) 81px\n      ),\n      repeating-linear-gradient(\n        -45deg,\n        transparent,\n        transparent 80px,\n        hsl(var(--background)) 80px,\n        hsl(var(--background)) 81px\n      ),\n      /* Main gradient - subtle court-inspired */\n      radial-gradient(\n        ellipse at 50% 30%,\n        hsl(142 20% 97%),\n        hsl(0 0% 98%)\n      );\n    opacity: 1;\n  }\n\n  .dark body::before {\n    background: \n      /* Subtle diagonal lines for dark mode */\n      repeating-linear-gradient(\n        45deg,\n        transparent,\n        transparent 80px,\n        hsl(var(--background)) 80px,\n        hsl(var(--background)) 81px\n      ),\n      repeating-linear-gradient(\n        -45deg,\n        transparent,\n        transparent 80px,\n        hsl(var(--background)) 80px,\n        hsl(var(--background)) 81px\n      ),\n      /* Dark mode gradient */\n      radial-gradient(\n        ellipse at 50% 30%,\n        hsl(142 15% 12%),\n        hsl(220 13% 10%)\n      );\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":12704},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"design_guidelines.md":{"content":"# Design Guidelines: Tennis Sponsorship Platform\n\n## Design Approach: Reference-Based\n**Primary Inspiration:** Patreon (sponsorship model) + Strava (athlete profiles) + Stripe (clean payment UX)\n\nThis platform bridges emotional connection with functional utility - sponsors need to feel inspired to support athletes, while both users need efficient dashboards. We'll create a premium, aspirational aesthetic that elevates the sport's prestige.\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- Primary: 142 76% 36% (Tennis court green - sophisticated, sporty)\n- Secondary: 220 13% 18% (Deep charcoal for text)\n- Accent: 25 95% 53% (Energetic orange for CTAs)\n- Background: 0 0% 98%\n- Surface: 0 0% 100%\n\n**Dark Mode:**\n- Primary: 142 60% 45%\n- Secondary: 220 13% 91%\n- Accent: 25 95% 58%\n- Background: 220 13% 10%\n- Surface: 220 13% 14%\n\n**Supporting Colors:**\n- Success: 142 76% 36%\n- Warning: 38 92% 50%\n- Error: 0 84% 60%\n- Info: 217 91% 60%\n\n### B. Typography\n- **Headings:** Inter (700, 600) - clean, modern, athletic\n- **Body:** Inter (400, 500) - excellent readability\n- **Data/Stats:** JetBrains Mono (500) - for scores, rankings\n\n**Scale:**\n- Hero: text-6xl to text-7xl\n- Section Headers: text-4xl to text-5xl\n- Card Titles: text-xl to text-2xl\n- Body: text-base to text-lg\n- Captions: text-sm\n\n### C. Layout System\n**Spacing:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n- Container: max-w-7xl for main content\n- Cards: p-6 to p-8\n- Section padding: py-16 to py-24\n- Grid gaps: gap-6 to gap-8\n\n### D. Component Library\n\n**Navigation:**\n- Sticky header with blur backdrop (backdrop-blur-md bg-white/80)\n- Clean iconography from Heroicons\n- User profile dropdown with avatar\n- Mobile: Slide-in drawer navigation\n\n**Player Profile Cards:**\n- Large athlete photo with gradient overlay\n- Stats overlay (ranking, recent wins)\n- Sponsorship progress bar\n- Prominent \"Sponsor\" CTA\n- Glass-morphism effect for overlays\n\n**Sponsorship Components:**\n- Tiered sponsorship cards (Travel, Gear, Stipend, Full Support)\n- Each tier shows impact and amount\n- Visual icons for each sponsorship type\n- Progress indicators for goals\n\n**Dashboards:**\n- Analytics cards with subtle shadows (shadow-sm)\n- Data visualization with chart.js\n- Activity feed with timeline design\n- Quick action buttons\n\n**Forms:**\n- Floating labels\n- Clear validation states\n- Multi-step progress indicator for player onboarding\n- Payment form with Stripe Elements styling\n\n**Data Display:**\n- Tournament results table with expandable rows\n- Upcoming events calendar view\n- Sponsorship history timeline\n- Achievement badges\n\n### E. Animations\n**Strategic Use Only:**\n- Smooth page transitions (200ms ease-in-out)\n- Card hover lift effect (translateY(-4px))\n- Loading skeletons for async content\n- Progress bar fills for sponsorship goals\n- NO scroll animations or excessive motion\n\n## Page-Specific Designs\n\n### Landing Page\n**Hero Section (90vh):**\n- Full-bleed athlete action photo (tennis player mid-serve)\n- Bold headline: \"Empower Tomorrow's Tennis Champions\"\n- Dual CTAs: \"I'm a Player\" (primary) + \"Become a Sponsor\" (outline with blur)\n- Trust indicator: \"Supporting 500+ Athletes\"\n\n**Sections (multi-column where appropriate):**\n1. How It Works (3-column grid: Player signs up → Profile → Get sponsored)\n2. Featured Athletes (masonry grid, 3 columns desktop, stacked mobile)\n3. Sponsorship Impact (2-column: Stats + Testimonial)\n4. Pricing Tiers (3-column cards with highlight on middle tier)\n5. Community Showcase (full-width scrolling banner of athlete photos)\n6. Final CTA (centered, single column with strong visual)\n\n### Player Dashboard\n- Welcome banner with current sponsorship status\n- 2-column layout: Profile completion widget + Recent activity\n- Sponsorship requests table\n- Upcoming tournaments calendar\n- Analytics: Views, sponsor interest, funds received\n\n### Sponsor Dashboard  \n- 3-column metrics: Total contributed, Athletes supported, Impact score\n- Sponsored athletes grid (4 columns desktop)\n- Contribution history timeline\n- Discover new athletes section\n\n### Player Profile (Public)\n- Hero: Large athlete photo with stats overlay\n- About section with bio\n- Tournament results table\n- Upcoming events\n- Sponsorship needs cards (grid layout)\n- Sponsor CTA sticky footer on scroll\n\n## Images Strategy\n**Must Include Images:**\n- Landing hero: Dynamic tennis action shot\n- Featured athlete cards: Professional headshots\n- Player profiles: 2-3 photos (portrait, action shot, podium/achievement)\n- Sponsorship impact: Real sponsor/player interaction photos\n- Trust indicators: Logo wall of supported tournaments/organizations\n\n**Image Treatment:**\n- Use subtle gradients on overlays (from transparent to primary/20)\n- Maintain 16:9 or 4:3 ratios for consistency\n- Apply subtle blur to backgrounds when text overlays needed\n- Hero images should be high-impact, professional sports photography\n\n## Accessibility & Consistency\n- Maintain WCAG AA contrast ratios minimum\n- Dark mode across entire application including forms\n- Focus states with 2px ring in accent color\n- Touch targets minimum 44x44px\n- Semantic HTML throughout\n\n**This design creates a premium, trustworthy platform that inspires sponsors while empowering athletes with professional presentation tools.**","size_bytes":5306},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/Footer.tsx":{"content":"import { Trophy } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t py-12\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n          <div>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Trophy className=\"h-6 w-6 text-primary\" />\n              <span className=\"text-lg font-bold text-card-foreground\">\n                GameSetMatch\n              </span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Connecting tennis players with sponsors at all competitive levels\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold text-card-foreground mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link\n                  href=\"/contact\"\n                  className=\"text-sm hover:text-primary transition-colors\"\n                >\n                  Contact Us\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/faq\"\n                  className=\"text-sm hover:text-primary transition-colors\"\n                  data-testid=\"link-faq\"\n                >\n                  FAQ\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold text-card-foreground mb-4\">Legal</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li>\n                <Link\n                  href=\"/privacy\"\n                  className=\"text-sm hover:text-primary transition-colors\"\n                >\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"/terms\"\n                  className=\"text-sm hover:text-primary transition-colors\"\n                >\n                  Terms of Service\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"pt-8 border-t text-center text-sm text-muted-foreground\">\n          <p>&copy; 2025 GameSetMatch. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2315},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/examples/PricingTiers.tsx":{"content":"import PricingTiers from \"../PricingTiers\";\n\nexport default function PricingTiersExample() {\n  return <PricingTiers />;\n}\n","size_bytes":122},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) throw new Error(\"useTheme must be used within ThemeProvider\");\n  return context;\n}\n","size_bytes":1074},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/HowItWorks.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { UserPlus, FileText, DollarSign } from \"lucide-react\";\n\nconst steps = [\n  {\n    icon: UserPlus,\n    title: \"Create Profile\",\n    description: \"Players sign up and create their professional profile showcasing results and upcoming events.\",\n  },\n  {\n    icon: FileText,\n    title: \"List Needs\",\n    description: \"Specify sponsorship needs - travel, gear, training, or monthly stipend support.\",\n  },\n  {\n    icon: DollarSign,\n    title: \"Get Sponsored\",\n    description: \"Sponsors discover your profile and contribute to help you achieve your tennis goals.\",\n  },\n];\n\nexport default function HowItWorks() {\n  return (\n    <section className=\"py-24 bg-background\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            How It Works\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Three simple steps to connect talented players with supportive sponsors\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {steps.map((step, index) => {\n            const Icon = step.icon;\n            return (\n              <Card \n                key={index} \n                className=\"p-8 text-center hover-elevate transition-all\"\n                data-testid={`card-step-${index + 1}`}\n              >\n                <div className=\"mb-6 flex justify-center\">\n                  <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Icon className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-semibold text-card-foreground mb-3\">\n                  {step.title}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {step.description}\n                </p>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2098},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/examples/FeaturedPlayers.tsx":{"content":"import FeaturedPlayers from \"../FeaturedPlayers\";\n\nexport default function FeaturedPlayersExample() {\n  return <FeaturedPlayers />;\n}\n","size_bytes":134},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/PlayerProfile.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, MapPin, Trophy } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PlayerProfile() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const {\n    data: player,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [`/api/players/${id}`],\n    queryFn: async () => {\n      const res = await fetch(`/api/players/${id}`);\n      if (!res.ok) throw new Error(\"Failed to load player\");\n      return res.json();\n    },\n  });\n\n  if (isLoading)\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n\n  if (error || !player)\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center\">\n        <p className=\"text-muted-foreground mb-4\">\n          Player not found or unavailable.\n        </p>\n        <Button variant=\"outline\" onClick={() => setLocation(\"/players\")}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back to Browse Players\n        </Button>\n      </div>\n    );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-green-50 to-background dark:from-green-950/20 py-12\">\n      <div className=\"container mx-auto px-6\">\n        {/* Back button */}\n        <Button\n          variant=\"outline\"\n          className=\"mb-6\"\n          onClick={() => setLocation(\"/players\")}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back to Browse Players\n        </Button>\n\n        {/* Player Header */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-3xl font-bold\">\n              {player.fullName}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground flex items-center gap-2 mt-1\">\n              <MapPin className=\"h-4 w-4\" /> {player.location} •{\" \"}\n              <Trophy className=\"h-4 w-4\" /> Rank #{player.ranking || \"N/A\"}\n            </p>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-lg text-muted-foreground mb-4\">\n              Specialization:{\" \"}\n              <span className=\"font-medium\">{player.specialization}</span>\n            </p>\n\n            {/* New fields */}\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-xl mb-1\">Your Story</h3>\n                <p className=\"text-muted-foreground whitespace-pre-line\">\n                  {player.story || \"No story provided yet.\"}\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-xl mb-1\">\n                  What are you raising funds for?\n                </h3>\n                <p className=\"text-muted-foreground whitespace-pre-line\">\n                  {player.fundraisingReason ||\n                    \"No fundraising details provided.\"}\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-xl mb-1\">About</h3>\n                <p className=\"text-muted-foreground whitespace-pre-line\">\n                  {player.bio || \"No bio available.\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3532},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/storage.ts":{"content":"import {\n  type Player,\n  type InsertPlayer,\n  players,\n  passwordResetTokens,\n} from \"@shared/schema\";\nimport { pool } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getPlayer(id: string): Promise<Player | undefined>;\n  getPlayerByEmail(email: string): Promise<Player | undefined>;\n  createPlayer(player: InsertPlayer): Promise<Player>;\n  getAllPlayers(): Promise<Player[]>;\n  getPublishedPlayers(): Promise<Player[]>;\n  getFeaturedPlayers(): Promise<Player[]>;\n  updatePlayer(\n    id: string,\n    player: Partial<InsertPlayer>,\n  ): Promise<Player | undefined>;\n  publishPlayer(id: string): Promise<Player | undefined>;\n  approvePlayer(id: string, adminId: string): Promise<Player | undefined>;\n  rejectPlayer(id: string, adminId: string): Promise<Player | undefined>;\n  deletePlayer(id: string): Promise<void>;\n  createPasswordResetToken(\n    playerId: string,\n    token: string,\n    expiresAt: Date,\n  ): Promise<void>;\n  getPasswordResetToken(\n    token: string,\n  ): Promise<{ id: string; playerId: string; expiresAt: Date } | undefined>;\n  deletePasswordResetToken(token: string): Promise<void>;\n}\n\nexport class DbStorage implements IStorage {\n  async getPlayer(id: string): Promise<Player | undefined> {\n    const result = await pool.query(\n      `SELECT id, full_name, email, age, country, location, ranking,\n              specialization, bio, funding_goals, video_url, photo_url,\n              published, featured, priority, is_admin,\n              approval_status, approved_by, approved_at\n         FROM players\n         WHERE id = $1`,\n      [id],\n    );\n    return result.rows[0];\n  }\n  async getPlayerByEmail(email: string): Promise<Player | undefined> {\n    try {\n      const result = await pool.query(\n        \"SELECT * FROM players WHERE email = $1\",\n        [email],\n      );\n      console.log(\"storage.getPlayerByEmail - Result:\", result);\n      if (result && result.rows.length > 0) {\n        console.log(\"storage.getPlayerByEmail - Player data:\", result.rows[0]);\n        return result.rows[0];\n      } else {\n        console.log(\"storage.getPlayerByEmail - Player not found\");\n        return undefined;\n      }\n    } catch (error) {\n      console.error(\"storage.getPlayerByEmail - Error:\", error);\n      return undefined;\n    }\n  }\n\n  async createPlayer(player: InsertPlayer): Promise<Player> {\n    const result = await pool.query(\n      `INSERT INTO players (\n        email, password_hash, full_name, age, country, location,\n        ranking, specialization, bio, funding_goals, video_url,\n        atp_profile_url, photo_url, published, featured, priority\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)\n      RETURNING *`,\n      [\n        player.email,\n        player.passwordHash,\n        player.fullName,\n        player.age,\n        player.country,\n        player.location,\n        player.ranking,\n        player.specialization,\n        player.bio,\n        player.fundingGoals,\n        player.videoUrl,\n        player.atpProfileUrl || null,\n        player.photoUrl || null,\n        player.published || false,\n        player.featured || false,\n        player.priority || \"normal\",\n      ],\n    );\n\n    return result.rows[0];\n  }\n\n  async getAllPlayers(): Promise<Player[]> {\n    const result = await pool.query(\n      \"SELECT * FROM players ORDER BY created_at DESC\",\n    );\n    return result.rows;\n  }\n\n  async getPublishedPlayers(): Promise<Player[]> {\n    const result = await pool.query(\n      `SELECT id, full_name, location, ranking, specialization, bio,\n              funding_goals, video_url, photo_url, country, age, active\n       FROM players\n       WHERE published = true AND active = true\n       ORDER BY priority DESC, created_at DESC`,\n    );\n    return result.rows;\n  }\n\n  async getFeaturedPlayers(): Promise<Player[]> {\n    const result = await pool.query(\n      \"SELECT * FROM players WHERE featured = true ORDER BY created_at DESC LIMIT 4\",\n    );\n    return result.rows;\n  }\n\n  async updatePlayer(\n    id: string,\n    player: Partial<InsertPlayer>,\n  ): Promise<Player | undefined> {\n    const fields: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    if (player.email !== undefined) {\n      fields.push(`email = $${paramCount++}`);\n      values.push(player.email);\n    }\n    if (player.fullName !== undefined) {\n      fields.push(`full_name = $${paramCount++}`);\n      values.push(player.fullName);\n    }\n    if (player.location !== undefined) {\n      fields.push(`location = $${paramCount++}`);\n      values.push(player.location);\n    }\n    if (player.ranking !== undefined) {\n      fields.push(`ranking = $${paramCount++}`);\n      values.push(player.ranking);\n    }\n    if (player.specialization !== undefined) {\n      fields.push(`specialization = $${paramCount++}`);\n      values.push(player.specialization);\n    }\n    if (player.bio !== undefined) {\n      fields.push(`bio = $${paramCount++}`);\n      values.push(player.bio);\n    }\n    if (player.fundingGoals !== undefined) {\n      fields.push(`funding_goals = $${paramCount++}`);\n      values.push(player.fundingGoals);\n    }\n    if (player.videoUrl !== undefined) {\n      fields.push(`video_url = $${paramCount++}`);\n      values.push(player.videoUrl);\n    }\n    if (player.photoUrl !== undefined) {\n      fields.push(`photo_url = $${paramCount++}`);\n      values.push(player.photoUrl);\n    }\n\n    if (fields.length === 0) {\n      return this.getPlayer(id);\n    }\n\n    values.push(id);\n    const result = await pool.query(\n      `UPDATE players SET ${fields.join(\", \")} WHERE id = $${paramCount} RETURNING *`,\n      values,\n    );\n    return result.rows[0];\n  }\n\n  async publishPlayer(id: string): Promise<Player | undefined> {\n    const result = await pool.query(\n      \"UPDATE players SET published = true WHERE id = $1 RETURNING *\",\n      [id],\n    );\n    return result.rows[0];\n  }\n\n  async approvePlayer(\n    id: string,\n    adminId: string,\n  ): Promise<Player | undefined> {\n    const result = await pool.query(\n      // set approval_status and also set published = true\n      \"UPDATE players SET approval_status = 'approved', published = true, approved_by = $2, approved_at = NOW() WHERE id = $1 RETURNING *\",\n      [id, adminId],\n    );\n    return result.rows[0];\n  }\n\n  async rejectPlayer(id: string, adminId: string): Promise<Player | undefined> {\n    const result = await pool.query(\n      \"UPDATE players SET approval_status = 'rejected', approved_by = $2, approved_at = NOW() WHERE id = $1 RETURNING *\",\n      [id, adminId],\n    );\n    return result.rows[0];\n  }\n\n  async deactivatePlayer(id: string): Promise<Player | undefined> {\n    const result = await pool.query(\n      `UPDATE players SET active = false WHERE id = $1 RETURNING *`,\n      [id],\n    );\n    return result.rows[0];\n  }\n\n  async activatePlayer(id: string): Promise<Player | undefined> {\n    const result = await pool.query(\n      `UPDATE players SET active = true WHERE id = $1 RETURNING *`,\n      [id],\n    );\n    return result.rows[0];\n  }\n\n  async deletePlayer(id: string): Promise<void> {\n    await pool.query(`DELETE FROM players WHERE id = $1`, [id]);\n  }\n  async createPasswordResetToken(\n    playerId: string,\n    token: string,\n    expiresAt: Date,\n  ): Promise<void> {\n    await pool.query(\n      \"INSERT INTO password_reset_tokens (player_id, token, expires_at) VALUES ($1, $2, $3)\",\n      [playerId, token, expiresAt],\n    );\n  }\n\n  async getPasswordResetToken(\n    token: string,\n  ): Promise<{ id: string; playerId: string; expiresAt: Date } | undefined> {\n    const result = await pool.query(\n      \"SELECT * FROM password_reset_tokens WHERE token = $1\",\n      [token],\n    );\n    return result.rows[0];\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await pool.query(\"DELETE FROM password_reset_tokens WHERE token = $1\", [\n      token,\n    ]);\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":7918},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/examples/Footer.tsx":{"content":"import Footer from \"../Footer\";\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":98},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/App.tsx":{"content":"import FAQ from \"./pages/FAQ\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Header from \"@/components/Header\";\nimport Home from \"@/pages/Home\";\nimport Players from \"@/pages/Players\";\nimport PlayerProfile from \"@/pages/PlayerProfile\";\nimport HowItWorks from \"@/pages/HowItWorks\";\nimport PlayerSignup from \"@/pages/PlayerSignup\";\nimport Signin from \"@/pages/Signin\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ThankYou from \"@/pages/ThankYou\";\nimport Contact from \"@/pages/Contact\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport ForgotPassword from \"@/pages/ForgotPassword\";\nimport ResetPassword from \"@/pages/ResetPassword\";\nimport AutoSignin from \"@/pages/AutoSignin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/players\" component={Players} />\n      <Route path=\"/player/:id\" component={PlayerProfile} />\n      <Route path=\"/how-it-works\" component={HowItWorks} />\n      <Route path=\"/signup/player\" component={PlayerSignup} />\n      <Route path=\"/signin\" component={Signin} />\n      <Route path=\"/faq\" component={FAQ} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/thank-you\" component={ThankYou} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n      <Route path=\"/auto-signin\" component={AutoSignin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <div className=\"min-h-screen bg-background\">\n            <Header />\n            <Router />\n          </div>\n          <Toaster />\n        </ThemeProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2420},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/Players.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport PlayerCard from \"@/components/PlayerCard\";\nimport Footer from \"@/components/Footer\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, SlidersHorizontal } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Player } from \"@shared/schema\";\n\nexport default function Players() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: players, isLoading } = useQuery<Player[]>({\n    queryKey: [\"/api/players\"],\n  });\n\n  const filteredPlayers = useMemo(() => {\n    if (!players) return [];\n    \n    const query = searchQuery.toLowerCase();\n    if (!query) return players;\n    \n    return players.filter(\n      (player) =>\n        player.fullName.toLowerCase().includes(query) ||\n        player.location.toLowerCase().includes(query) ||\n        player.specialization.toLowerCase().includes(query)\n    );\n  }, [players, searchQuery]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading players...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-muted/30 py-16\">\n          <div className=\"container mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n              Browse Players\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl\">\n              Discover tennis players at all levels seeking sponsorship support\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name, location, or specialization...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search-players\"\n              />\n            </div>\n            <Button variant=\"outline\" data-testid=\"button-filters\">\n              <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n              Filters\n            </Button>\n          </div>\n\n          {filteredPlayers.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-12\">\n              {searchQuery ? \"No players found matching your search.\" : \"No players available yet.\"}\n            </p>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredPlayers.map((player) => {\n                const ranking = player.ranking ? parseInt(player.ranking, 10) : undefined;\n                return (\n                  <PlayerCard \n                    key={player.id}\n                    id={player.id}\n                    name={player.fullName}\n                    location={player.location}\n                    ranking={!isNaN(ranking || 0) ? ranking : undefined}\n                    specialization={player.specialization}\n                    photoUrl={player.photoUrl}\n                  />\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3503},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst pgSession = connectPg(session);\napp.use(\n  session({\n    store: new pgSession({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n      onError: (error) => {\n        console.error(\"Session store error:\", error);\n      },\n    }),\n    secret: process.env.SESSION_SECRET || \"development-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      maxAge: 7 * 24 * 60 * 60 * 1000,\n      httpOnly: true,\n      secure: false,\n      sameSite: \"lax\",\n    },\n  }),\n);\n// Serve uploaded files\napp.use(\"/uploads\", express.static(path.join(process.cwd(), \"uploads\")));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    },\n  );\n})();\n","size_bytes":2836},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/examples/Header.tsx":{"content":"import Header from \"../Header\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <Header />\n    </ThemeProvider>\n  );\n}\n","size_bytes":201},"client/src/components/PricingTiers.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\n\nconst tiers = [\n  {\n    name: \"Starter\",\n    price: \"Free\",\n    period: \"3 months\",\n    description: \"Perfect for getting started\",\n    features: [\n      \"Basic profile page\",\n      \"List up to 3 sponsorship needs\",\n      \"Basic analytics\",\n      \"Community support\",\n    ],\n    cta: \"Start Free Trial\",\n    highlighted: false,\n  },\n  {\n    name: \"Pro\",\n    price: \"$29\",\n    period: \"per month\",\n    description: \"For serious competitors\",\n    features: [\n      \"Premium profile with gallery\",\n      \"Unlimited sponsorship listings\",\n      \"Advanced analytics & insights\",\n      \"Priority sponsor matching\",\n      \"Social media integration\",\n      \"Dedicated support\",\n    ],\n    cta: \"Get Started\",\n    highlighted: true,\n  },\n  {\n    name: \"Elite\",\n    price: \"$79\",\n    period: \"per month\",\n    description: \"Maximum visibility\",\n    features: [\n      \"Everything in Pro\",\n      \"Featured placement on homepage\",\n      \"Personal success manager\",\n      \"Sponsorship proposal templates\",\n      \"Video highlights gallery\",\n      \"Media kit creation\",\n    ],\n    cta: \"Go Elite\",\n    highlighted: false,\n  },\n];\n\nexport default function PricingTiers() {\n  return (\n    <section className=\"py-24 bg-background\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            Player Pricing Plans\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Start with 3 months free, then select the plan that fits your ambitions. Sponsors can browse players for free.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {tiers.map((tier, index) => (\n            <Card\n              key={index}\n              className={`p-8 ${\n                tier.highlighted\n                  ? \"border-primary border-2 shadow-lg scale-105\"\n                  : \"\"\n              }`}\n              data-testid={`card-pricing-${tier.name.toLowerCase()}`}\n            >\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-2xl font-bold text-card-foreground mb-2\">\n                  {tier.name}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {tier.description}\n                </p>\n                <div className=\"mb-1\">\n                  <span className=\"text-4xl font-bold text-foreground\">\n                    {tier.price}\n                  </span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{tier.period}</p>\n              </div>\n\n              <ul className=\"space-y-3 mb-8\">\n                {tier.features.map((feature, featureIndex) => (\n                  <li\n                    key={featureIndex}\n                    className=\"flex items-start gap-2 text-sm\"\n                  >\n                    <Check className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                    <span className=\"text-muted-foreground\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              <Button\n                className=\"w-full\"\n                variant={tier.highlighted ? \"default\" : \"outline\"}\n                data-testid={`button-select-${tier.name.toLowerCase()}`}\n              >\n                {tier.cta}\n              </Button>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3629},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/ThankYou.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { CheckCircle2, Calendar, Users, Bell } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/Footer\";\n\nexport default function ThankYou() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1 flex items-center justify-center py-20 px-6\">\n        <Card className=\"max-w-3xl w-full p-12\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mb-6\">\n              <CheckCircle2 className=\"h-10 w-10 text-primary\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-card-foreground mb-4\">\n              Welcome to GameSetMatch!\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Thank you for creating your player profile. You're one step closer to connecting with sponsors.\n            </p>\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-6 mb-8\">\n            <h2 className=\"text-xl font-bold text-card-foreground mb-4\">\n              What Happens Next?\n            </h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-4\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Users className=\"h-5 w-5 text-primary\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-card-foreground mb-1\">Profile Review</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Our team will review your application to ensure quality and authenticity. This typically takes 1-2 business days.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Bell className=\"h-5 w-5 text-primary\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-card-foreground mb-1\">Approval Notification</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Once approved, we'll send you an email with next steps and how to complete your profile with photos and videos.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <Calendar className=\"h-5 w-5 text-primary\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-card-foreground mb-1\">Publish Your Profile</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    After approval, you'll be able to publish your profile from your dashboard to make it visible to sponsors seeking players to support.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-6 mb-8\">\n            <h3 className=\"font-semibold text-card-foreground mb-2\">\n              In the Meantime\n            </h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              You can access your dashboard to view your profile status and information while we review your application.\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button asChild size=\"lg\" data-testid=\"button-dashboard\">\n              <Link href=\"/dashboard\">\n                Go to Dashboard\n              </Link>\n            </Button>\n            <Button asChild variant=\"outline\" size=\"lg\" data-testid=\"button-home\">\n              <Link href=\"/\">\n                Back to Home\n              </Link>\n            </Button>\n          </div>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4346},"server/db.ts":{"content":"import pg from \"pg\";\nconst { Pool } = pg;\n\nconst poolInstance = new Pool({\n  user: process.env.PGUSER,\n  host: process.env.PGHOST,\n  database: process.env.PGDATABASE,\n  password: process.env.PGPASSWORD,\n  port: parseInt(process.env.PGPORT || \"5432\", 10),\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const query = async (text: string, params: any[]) => {\n  try {\n    const start = Date.now();\n    const res = await poolInstance.query(text, params);\n    const duration = Date.now() - start;\n    console.log(\"executed query\", { text, duration, rows: res.rowCount });\n    return res;\n  } catch (error) {\n    console.error(\"Error executing query\", text, error);\n    throw error;\n  }\n};\n\nexport const pool = poolInstance;\n","size_bytes":729},"server/types.d.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    playerId?: string;\n  }\n}\n","size_bytes":117},"client/src/pages/SponsorSignup.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport Footer from \"@/components/Footer\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowLeft, ArrowRight, CheckCircle2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\n\nconst sponsorSignupSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  fullName: z.string().min(2, \"Please enter your full name\"),\n  organization: z.string().optional(),\n  contributionTypes: z.array(z.string()).min(1, \"Please select at least one contribution type\"),\n  preferredPlayers: z.string().min(10, \"Please describe your preferences\"),\n});\n\ntype SponsorSignupForm = z.infer<typeof sponsorSignupSchema>;\n\nconst contributionOptions = [\n  { id: \"travel\", label: \"Travel Funds\" },\n  { id: \"miles\", label: \"Airline Miles\" },\n  { id: \"hotel\", label: \"Hotel Points\" },\n  { id: \"gear\", label: \"Equipment & Gear\" },\n  { id: \"stipend\", label: \"Monthly Stipend\" },\n];\n\nexport default function SponsorSignup() {\n  const [step, setStep] = useState(1);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const form = useForm<SponsorSignupForm>({\n    resolver: zodResolver(sponsorSignupSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      fullName: \"\",\n      organization: \"\",\n      contributionTypes: [],\n      preferredPlayers: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SponsorSignupForm) => {\n    console.log(\"Sponsor signup data:\", data);\n    setIsSubmitted(true);\n  };\n\n  const nextStep = async () => {\n    let fieldsToValidate: (keyof SponsorSignupForm)[] = [];\n    \n    if (step === 1) {\n      fieldsToValidate = [\"email\", \"password\", \"fullName\"];\n    }\n\n    const isValid = await form.trigger(fieldsToValidate);\n    if (isValid) {\n      setStep(step + 1);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <div className=\"flex-1 flex items-center justify-center py-20\">\n          <Card className=\"max-w-2xl w-full mx-6 p-12 text-center\">\n            <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-full bg-accent/10 mb-6\">\n              <CheckCircle2 className=\"h-10 w-10 text-accent\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-card-foreground mb-4\">\n              Welcome to GameSetMatch!\n            </h1>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              Your account has been created. You can now browse players and start making a difference in their tennis careers.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild data-testid=\"button-browse-players\">\n                <Link href=\"/players\">\n                  Browse Players\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" data-testid=\"button-home\">\n                <Link href=\"/\">\n                  Back to Home\n                </Link>\n              </Button>\n            </div>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-accent/10 to-background py-12\">\n          <div className=\"container mx-auto px-6\">\n            <Button asChild variant=\"ghost\" size=\"sm\" className=\"mb-4\" data-testid=\"button-back\">\n              <Link href=\"/how-it-works\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Link>\n            </Button>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n              Become a Sponsor\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Support tennis players at all levels and make a meaningful impact\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-12 max-w-3xl\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-2\">\n              {[1, 2].map((s) => (\n                <div\n                  key={s}\n                  className={`flex-1 h-2 rounded-full mx-1 ${\n                    s <= step ? \"bg-accent\" : \"bg-muted\"\n                  }`}\n                />\n              ))}\n            </div>\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Step {step} of 2\n            </p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {step === 1 && (\n                <Card className=\"p-6\">\n                  <h2 className=\"text-2xl font-bold text-card-foreground mb-6\">\n                    Account Information\n                  </h2>\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"your.email@example.com\"\n                              data-testid=\"input-email\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Your full name\"\n                              data-testid=\"input-fullname\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"organization\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Organization (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Company or organization name\"\n                              data-testid=\"input-organization\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </Card>\n              )}\n\n              {step === 2 && (\n                <Card className=\"p-6\">\n                  <h2 className=\"text-2xl font-bold text-card-foreground mb-6\">\n                    Sponsorship Preferences\n                  </h2>\n                  <div className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"contributionTypes\"\n                      render={() => (\n                        <FormItem>\n                          <FormLabel>How would you like to contribute?</FormLabel>\n                          <FormDescription>\n                            Select all that apply\n                          </FormDescription>\n                          <div className=\"space-y-3 mt-3\">\n                            {contributionOptions.map((option) => (\n                              <FormField\n                                key={option.id}\n                                control={form.control}\n                                name=\"contributionTypes\"\n                                render={({ field }) => (\n                                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(option.id)}\n                                        onCheckedChange={(checked) => {\n                                          const currentValue = field.value || [];\n                                          const newValue = checked\n                                            ? [...currentValue, option.id]\n                                            : currentValue.filter((v) => v !== option.id);\n                                          field.onChange(newValue);\n                                        }}\n                                        data-testid={`checkbox-${option.id}`}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"font-normal cursor-pointer\">\n                                      {option.label}\n                                    </FormLabel>\n                                  </FormItem>\n                                )}\n                              />\n                            ))}\n                          </div>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"preferredPlayers\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Player Preferences</FormLabel>\n                          <FormDescription>\n                            What type of players would you like to support? (e.g., location, ranking, specialization)\n                          </FormDescription>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Describe the players you'd like to sponsor...\"\n                              className=\"min-h-[120px]\"\n                              data-testid=\"input-preferences\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </Card>\n              )}\n\n              <div className=\"flex justify-between gap-4\">\n                {step > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setStep(step - 1)}\n                    data-testid=\"button-previous\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Previous\n                  </Button>\n                )}\n                {step < 2 ? (\n                  <Button\n                    type=\"button\"\n                    onClick={nextStep}\n                    className=\"ml-auto\"\n                    data-testid=\"button-next\"\n                  >\n                    Next\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                ) : (\n                  <Button type=\"submit\" className=\"ml-auto\" data-testid=\"button-submit\">\n                    Create Account\n                  </Button>\n                )}\n              </div>\n            </form>\n          </Form>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12985},"client/src/components/PlayerBenefits.tsx":{"content":"import { Check, Globe, Target, Users } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\nconst benefits = [\n  {\n    icon: Check,\n    title: \"Create Your Profile for Free\",\n    description: \"No upfront cost to join. Build your profile and showcase your tennis journey.\",\n  },\n  {\n    icon: Globe,\n    title: \"Reach a Global Audience\",\n    description: \"Connect with supporters and sponsors from all over the world.\",\n  },\n  {\n    icon: Target,\n    title: \"Set Your Own Funding Goals\",\n    description: \"Raise money for travel, coaching, equipment, tournaments, and more.\",\n  },\n  {\n    icon: Users,\n    title: \"Be a Launch Player\",\n    description: \"Sign up now to be one of our first featured players at launch!\",\n  },\n];\n\nexport default function PlayerBenefits() {\n  return (\n    <section className=\"py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            Why Join GameSetMatch?\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Everything you need to connect with sponsors and fuel your tennis career\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto\">\n          {benefits.map((benefit, index) => (\n            <Card key={index} className=\"p-6 text-center hover-elevate\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n                <benefit.icon className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-card-foreground mb-3\">\n                {benefit.title}\n              </h3>\n              <p className=\"text-muted-foreground\">\n                {benefit.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1974},"client/src/pages/Dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Footer from \"@/components/Footer\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport {\n  User,\n  MapPin,\n  Trophy,\n  CheckCircle2,\n  XCircle,\n  LogOut,\n  Shield,\n} from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const { player, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Please sign in to access your dashboard.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation(\"/signin\");\n      }, 500);\n    }\n  }, [isLoading, isAuthenticated, setLocation, toast]);\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(\"/api/auth/logout\", { method: \"POST\" });\n      if (!res.ok) throw new Error(\"Logout failed\");\n      return res.json();\n    },\n    onSuccess: () => {\n      // CRITICAL: Set the auth data to null BEFORE invalidating\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n\n      // Then invalidate to trigger refetch\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n\n      toast({ title: \"Signed out successfully\" });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  const toggleActiveMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(\"/api/players/toggle-active\", { method: \"POST\" });\n      if (!res.ok) throw new Error(\"Failed to update\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: player?.active ? \"Profile deactivated\" : \"Profile activated\",\n      });\n    },\n  });\n  const publishMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(`/api/players/${player?.id}/publish`, {\n        method: \"POST\",\n      });\n\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Failed to publish profile\");\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Profile Published\",\n        description: \"Your profile is now visible to sponsors!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  if (!player) {\n    return null;\n  }\n\n  const initials = player.fullName\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-primary/10 to-background py-12\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"flex justify-between items-center flex-wrap gap-4\">\n              <div>\n                <h1 className=\"text-4xl md:text-5xl font-bold text-foreground\">\n                  Player Dashboard\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Welcome back, {player.fullName}!\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                {player.isAdmin && (\n                  <Button\n                    asChild\n                    variant=\"destructive\"\n                    data-testid=\"button-admin-dashboard\"\n                  >\n                    <Link href=\"/admin\">\n                      <Shield className=\"h-4 w-4 mr-2\" />\n                      Admin\n                    </Link>\n                  </Button>\n                )}\n                <Button\n                  variant=\"outline\"\n                  onClick={() => logoutMutation.mutate()}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-12\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"md:col-span-1\">\n              <CardHeader>\n                <CardTitle>Profile</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex flex-col items-center text-center\">\n                <Avatar className=\"h-32 w-32 mb-4\">\n                  <AvatarImage src={player.photoUrl || undefined} />\n                  <AvatarFallback className=\"text-2xl\">\n                    <User className=\"h-16 w-16\" />\n                  </AvatarFallback>\n                </Avatar>\n                <h2 className=\"text-2xl font-bold mb-2\">{player.fullName}</h2>\n                <p className=\"text-muted-foreground mb-4\">{player.email}</p>\n                <div className=\"w-full space-y-2\">\n                  {player.published ? (\n                    <Badge className=\"w-full justify-center\" variant=\"default\">\n                      <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                      Published\n                    </Badge>\n                  ) : (\n                    <Badge\n                      className=\"w-full justify-center\"\n                      variant=\"secondary\"\n                    >\n                      <XCircle className=\"h-4 w-4 mr-2\" />\n                      Not Published\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"md:col-span-2\">\n              <CardHeader>\n                <CardTitle>Player Information</CardTitle>\n                <CardDescription>Your tennis profile details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex items-center text-muted-foreground mb-1\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span className=\"text-sm\">Location</span>\n                    </div>\n                    <p className=\"font-medium\">{player.location}</p>\n                  </div>\n                  {player.ranking && (\n                    <div>\n                      <div className=\"flex items-center text-muted-foreground mb-1\">\n                        <Trophy className=\"h-4 w-4 mr-2\" />\n                        <span className=\"text-sm\">Ranking</span>\n                      </div>\n                      <p className=\"font-medium\">{player.ranking}</p>\n                    </div>\n                  )}\n                  <div className=\"md:col-span-2\">\n                    <div className=\"text-muted-foreground mb-1\">\n                      <span className=\"text-sm\">Specialization</span>\n                    </div>\n                    <p className=\"font-medium\">{player.specialization}</p>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <div className=\"text-muted-foreground mb-1\">\n                      <span className=\"text-sm\">Bio</span>\n                    </div>\n                    <p className=\"text-muted-foreground\">{player.bio}</p>\n                  </div>\n                </div>\n\n                <div className=\"pt-4 border-t space-y-4\">\n                  {player.approvalStatus === \"pending\" && (\n                    <div className=\"bg-orange-50 dark:bg-orange-950/20 p-4 rounded-md border border-orange-200 dark:border-orange-800\">\n                      <div className=\"flex items-start gap-3\">\n                        <XCircle className=\"h-5 w-5 text-orange-600 dark:text-orange-500 mt-0.5 flex-shrink-0\" />\n                        <div>\n                          <h3 className=\"font-semibold text-orange-900 dark:text-orange-100 mb-1\">\n                            Application Under Review\n                          </h3>\n                          <p className=\"text-sm text-orange-800 dark:text-orange-200\">\n                            Your application is being reviewed by our team.\n                            You'll receive an email once your profile has been\n                            approved and you can publish it to sponsors.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  {player.approvalStatus === \"rejected\" && (\n                    <div className=\"bg-destructive/10 p-4 rounded-md border border-destructive/20\">\n                      <div className=\"flex items-start gap-3\">\n                        <XCircle className=\"h-5 w-5 text-destructive mt-0.5 flex-shrink-0\" />\n                        <div>\n                          <h3 className=\"font-semibold text-destructive mb-1\">\n                            Application Not Approved\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Unfortunately, your application was not approved at\n                            this time. If you have questions or would like to\n                            reapply, please contact our support team.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  {player.approvalStatus === \"approved\" &&\n                    !player.published && (\n                      <div className=\"bg-muted/50 p-4 rounded-md\">\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Your profile has been approved! Publish it now to make\n                          it visible to sponsors and start receiving sponsorship\n                          opportunities.\n                        </p>\n                        <Button\n                          onClick={() => publishMutation.mutate()}\n                          disabled={publishMutation.isPending}\n                          data-testid=\"button-publish\"\n                        >\n                          {publishMutation.isPending\n                            ? \"Publishing...\"\n                            : \"Publish Profile\"}\n                        </Button>\n                        <Button\n                          variant={player?.active ? \"outline\" : \"default\"}\n                          onClick={() => toggleActiveMutation.mutate()}\n                        >\n                          {player?.active\n                            ? \"Make Profile Inactive\"\n                            : \"Activate Profile\"}\n                        </Button>\n                      </div>\n                    )}\n                  {player.published && (\n                    <div className=\"bg-primary/5 p-4 rounded-md border border-primary/20\">\n                      <p className=\"text-sm text-foreground\">\n                        Your profile is live and visible to sponsors!\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12007},"replit.md":{"content":"# GameSetMatch - Tennis Player Sponsorship Platform\n\n## Project Overview\nGameSetMatch is a sponsorship platform connecting tennis players at all competitive levels (ATP, Challenger, ITF) with sponsors. Players can showcase their profiles with tournament results and upcoming events while requesting sponsorships for travel, hotel, gear, and monthly stipends.\n\n**Business Model:**\n- **Players:** 3-month free trial, then paid subscription\n- **Sponsors:** Free to join, can contribute using miles, hotel points, or direct payment\n- **Benefit:** Community service recognition for sponsors\n\n## Technology Stack\n- **Frontend:** React, TypeScript, Vite, Tailwind CSS, shadcn/ui\n- **Backend:** Express.js, Node.js\n- **Routing:** Wouter\n- **Forms:** React Hook Form + Zod validation\n- **Data Fetching:** TanStack Query (React Query v5)\n- **Payments:** Stripe integration (configured)\n- **Storage:** In-memory storage (MemStorage) - database implementation planned for Phase 2\n\n## Project Structure\n\n### Routes\n- `/` - Landing page with hero, featured players, and how it works preview\n- `/players` - Browse all players with search/filter\n- `/player/:id` - Individual player profile\n- `/how-it-works` - Platform explanation for players and sponsors\n- `/signup/player` - Multi-step player registration\n- `/signup/sponsor` - Multi-step sponsor registration\n\n### User Flows\n\n#### Player Journey\n1. **Discovery:** Land on homepage → Read \"How It Works\"\n2. **Signup:** Click \"I'm a Player\" → Multi-step form:\n   - Step 1: Account (email, password, full name)\n   - Step 2: Profile (location, ranking, specialization)\n   - Step 3: Bio (tennis story and goals)\n3. **Confirmation:** Application submitted → Review pending\n4. **Profile:** Once approved, profile visible to sponsors\n\n#### Sponsor Journey (Simplified MVP)\n1. **Discovery:** Land on homepage → Browse featured players (no signup required)\n2. **Browse:** Click \"Browse Players\" → View all player profiles freely\n3. **Sponsorship:** (Phase 2) When ready to sponsor, complete simple sponsorship form and payment\n\n### Navigation Structure\n**Header Links:**\n- Home (/)\n- Browse Players (/players)\n- How It Works (/how-it-works)\n- Sign In (not yet implemented)\n- Get Started (not yet implemented)\n\n**CTA Buttons:**\n- Hero: \"I'm a Player\" → /signup/player\n- Hero: \"Browse Players\" → /players\n- How It Works: \"Sign Up as a Player\" → /signup/player\n- How It Works: \"Browse Players to Sponsor\" → /players\n\n## Key Design Decisions\n\n### Browse Players vs Featured Players\n- **Featured Players:** Curated subset (first 4 players) displayed on homepage\n  - Purpose: Highlight specific players to sponsors\n  - Selection: Manual curation (in future: based on criteria like urgent needs, recent activity, or admin selection)\n- **Browse Players:** Full list of all players (currently 12 sample players)\n  - Purpose: Allow sponsors to search/filter all available players\n  - Features: Search by name/location, filter capabilities\n\n### Sample Data Convention\n- **Player names:** Using generic identifiers (Player A, B, C, etc.) instead of real names to avoid copyright/privacy issues\n- **No metrics:** Removed funding progress, amounts, and platform statistics until real data exists (Phase 2)\n- **No images:** Using avatar icons only to avoid copyright concerns\n\n### Messaging Guidelines\n- **Inclusive language:** Emphasize \"all levels\" (ATP, Challenger, ITF) not just \"future champions\"\n- **Accurate representation:** No misleading metrics or fake success stories\n- **Clear value prop:** Focus on actual benefits (travel, gear, stipends) not vague promises\n\n## MVP Limitations & Phase 2 Features\n\n### Current MVP State\n**Players:**\n- Multi-step signup form (account, profile, bio)\n- Form validation with Zod\n- Basic profile information collection\n\n**Sponsors:**\n- Free browsing of all player profiles\n- No signup required to view players\n- Sponsorship transactions planned for Phase 2\n\n### Phase 2 Features (Not Yet Implemented)\n**Authentication & Storage:**\n- User authentication system for players\n- Database integration (replacing in-memory storage)\n- Session management and login functionality\n\n**Player Profiles:**\n- Photo/image upload capabilities\n- Profile publishing/approval workflow\n- Tournament results integration\n- Video highlights gallery\n\n**Sponsorship System:**\n- Sponsor account creation (when ready to contribute)\n- Actual Stripe payment processing\n- Sponsorship tracking and management\n- Multiple contribution types (miles, points, direct payment)\n\n**Platform Features:**\n- Player/sponsor dashboards\n- Admin panel for featured player curation\n- Email notifications\n- Analytics and metrics\n- Real player data and profiles\n\n## Color Scheme (Tennis-Themed)\n- **Primary:** Tennis court green (#16A34A, #22C55E)\n- **Accent:** Tennis ball orange (#F97316, #FB923C)\n- **Background:** Neutral whites/grays\n- See `design_guidelines.md` for complete design system\n\n## Important Notes\n- All current player data is sample/demonstration only\n- Payment processing is configured but not fully integrated\n- This is a prototype/MVP - not production-ready\n- No real sponsorships should be processed until Phase 2 completion\n","size_bytes":5170},"client/src/pages/Signin.tsx":{"content":"import { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport Footer from \"@/components/Footer\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst signinSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Please enter your password\"),\n});\n\ntype SigninForm = z.infer<typeof signinSchema>;\n\nexport default function Signin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<SigninForm>({\n    resolver: zodResolver(signinSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signinMutation = useMutation({\n    mutationFn: async (data: SigninForm) => {\n      const res = await fetch(\"/api/auth/signin\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Signin failed\");\n      }\n\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Success\",\n        description: \"Welcome back!\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Signin Failed\",\n        description:\n          error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SigninForm) => {\n    signinMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1 flex items-center justify-center py-20\">\n        <Card className=\"max-w-md w-full mx-6 p-8\">\n          <Button asChild variant=\"ghost\" size=\"sm\" className=\"mb-4\">\n            <Link href=\"/\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Link>\n          </Button>\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-card-foreground mb-2\">\n              Player Sign In\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Sign in to your GameSetMatch account\n            </p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"your.email@example.com\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <div className=\"flex items-center justify-between\">\n                      <FormLabel>Password</FormLabel>\n                      <Link\n                        href=\"/forgot-password\"\n                        className=\"text-sm text-primary hover:underline\"\n                        data-testid=\"link-forgot-password\"\n                      >\n                        Forgot password?\n                      </Link>\n                    </div>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                data-testid=\"button-signin\"\n                disabled={signinMutation.isPending}\n              >\n                {signinMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Link\n                href=\"/signup/player\"\n                className=\"text-primary hover:underline\"\n                data-testid=\"link-signup\"\n              >\n                Sign up here\n              </Link>\n            </p>\n          </div>\n        </Card>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5353},"client/src/pages/HowItWorks.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport Footer from \"@/components/Footer\";\nimport { UserPlus, FileText, TrendingUp, Users, DollarSign, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst playerSteps = [\n  {\n    icon: UserPlus,\n    title: \"Sign Up\",\n    description: \"Create your player profile in minutes. It's free to get started with a 3-month trial.\",\n  },\n  {\n    icon: FileText,\n    title: \"Build Your Profile\",\n    description: \"Showcase your tournament results, upcoming events, and sponsorship needs.\",\n  },\n  {\n    icon: TrendingUp,\n    title: \"Get Sponsored\",\n    description: \"Connect with sponsors who want to support your tennis journey with travel, gear, and stipends.\",\n  },\n];\n\nconst sponsorSteps = [\n  {\n    icon: Users,\n    title: \"Browse Players\",\n    description: \"Discover tennis players at all competitive levels who need your support. No signup required to browse.\",\n  },\n  {\n    icon: DollarSign,\n    title: \"Choose a Player\",\n    description: \"Review player profiles, tournament schedules, and sponsorship needs to find the right fit.\",\n  },\n  {\n    icon: Shield,\n    title: \"Make an Impact\",\n    description: \"Contribute with travel support, gear, or stipends. Help players compete and achieve their goals.\",\n  },\n];\n\nconst faqs = [\n  {\n    question: \"Who can join as a player?\",\n    answer: \"Any tennis player competing at ATP, Challenger, or ITF levels can create a profile. The platform supports players at all stages of their professional journey.\",\n  },\n  {\n    question: \"How much does it cost for players?\",\n    answer: \"Players get a 3-month free trial. After that, a subscription fee applies to maintain your active profile and connect with sponsors.\",\n  },\n  {\n    question: \"What types of sponsorship are available?\",\n    answer: \"Sponsors can contribute travel funds, hotel accommodations (using points), training gear, tournament entry fees, or monthly stipends to support ongoing expenses.\",\n  },\n  {\n    question: \"Do sponsors need to sign up?\",\n    answer: \"No signup is required to browse player profiles. When you're ready to sponsor a player, you'll be guided through a simple process to make your contribution.\",\n  },\n  {\n    question: \"Is my payment information secure?\",\n    answer: \"Yes, all payments are processed securely through Stripe, a leading payment processor. We never store your payment details on our servers.\",\n  },\n  {\n    question: \"Can I sponsor multiple players?\",\n    answer: \"Absolutely! You can support as many players as you'd like and choose different types of support for each one.\",\n  },\n];\n\nexport default function HowItWorks() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-primary/10 to-background py-20\">\n          <div className=\"container mx-auto px-6 text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-foreground mb-6\">\n              How It Works\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              GameSetMatch connects tennis players at all levels with sponsors who want to support their journey.\n              Here's how our platform works for both players and sponsors.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-16\">\n          <div id=\"for-players\" className=\"mb-20\">\n            <h2 className=\"text-4xl font-bold text-foreground text-center mb-4\">\n              For Players\n            </h2>\n            <p className=\"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\">\n              Get the support you need to compete at ATP, Challenger, and ITF tournaments\n            </p>\n            <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n              {playerSteps.map((step, index) => (\n                <Card key={index} className=\"p-8 text-center\">\n                  <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-6\">\n                    <step.icon className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-card-foreground mb-3\">\n                    {index + 1}. {step.title}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {step.description}\n                  </p>\n                </Card>\n              ))}\n            </div>\n            <div className=\"text-center\">\n              <Button asChild size=\"lg\" data-testid=\"button-player-signup-how-it-works\">\n                <Link href=\"/signup/player\">\n                  Sign Up as a Player\n                </Link>\n              </Button>\n            </div>\n          </div>\n\n          <div id=\"for-sponsors\" className=\"mb-20\">\n            <h2 className=\"text-4xl font-bold text-foreground text-center mb-4\">\n              For Sponsors\n            </h2>\n            <p className=\"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\">\n              Support tennis players with travel, gear, and training expenses\n            </p>\n            <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n              {sponsorSteps.map((step, index) => (\n                <Card key={index} className=\"p-8 text-center\">\n                  <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-accent/10 mb-6\">\n                    <step.icon className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-card-foreground mb-3\">\n                    {index + 1}. {step.title}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {step.description}\n                  </p>\n                </Card>\n              ))}\n            </div>\n            <div className=\"text-center\">\n              <Button asChild size=\"lg\" variant=\"outline\" data-testid=\"button-browse-players-how-it-works\">\n                <Link href=\"/players\">\n                  Browse Players to Sponsor\n                </Link>\n              </Button>\n            </div>\n          </div>\n\n          <div id=\"faq\" className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-4xl font-bold text-foreground text-center mb-12\">\n              Frequently Asked Questions\n            </h2>\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {faqs.map((faq, index) => (\n                <AccordionItem key={index} value={`item-${index}`}>\n                  <AccordionTrigger className=\"text-left\">\n                    {faq.question}\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-muted-foreground\">\n                    {faq.answer}\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7115},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Player } from \"@shared/schema\";\n\nexport function useAuth() {\n  const {\n    data: player,\n    isLoading,\n    error,\n  } = useQuery<Player>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  return {\n    player,\n    isLoading,\n    isAuthenticated: !!player,\n    error,\n  };\n}\n","size_bytes":348},"client/src/pages/PlayerSignup.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport Footer from \"@/components/Footer\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { signupPlayerSchema, type SignupPlayer } from \"@shared/schema\";\nimport { ArrowLeft, ArrowRight, CheckCircle2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PlayerSignup() {\n  const [step, setStep] = useState(1);\n  const form = useForm<SignupPlayer>({\n    resolver: zodResolver(signupPlayerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      fullName: \"\",\n      age: 18,\n      country: \"\",\n      location: \"\",\n      ranking: undefined,\n      specialization: \"\",\n      bio: \"\",\n      fundingGoals: \"\",\n      videoUrl: \"\",\n      atpProfileUrl: \"\",\n    },\n  });\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const onSubmit = async (values: SignupPlayer) => {\n    try {\n      const formData = new FormData();\n\n      // Add all text fields\n      formData.append(\"email\", values.email);\n      formData.append(\"password\", values.password);\n      formData.append(\"fullName\", values.fullName);\n      formData.append(\"age\", values.age.toString());\n      formData.append(\"country\", values.country);\n      formData.append(\"location\", values.location);\n      if (values.ranking) formData.append(\"ranking\", values.ranking.toString());\n      formData.append(\"specialization\", values.specialization);\n      formData.append(\"bio\", values.bio);\n      formData.append(\"fundingGoals\", values.fundingGoals);\n      if (values.videoUrl) formData.append(\"videoUrl\", values.videoUrl);\n      if (values.atpProfileUrl)\n        formData.append(\"atpProfileUrl\", values.atpProfileUrl);\n\n      // Add photo file\n      if (values.photo) {\n        formData.append(\"photo\", values.photo);\n      }\n\n      const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Signup failed\");\n      }\n\n      window.location.href = \"/thank-you\";\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to sign up\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const nextStep = async () => {\n    let fieldsToValidate: (keyof SignupPlayer)[] = [];\n\n    if (step === 1) {\n      fieldsToValidate = [\"email\", \"password\", \"fullName\", \"age\", \"country\"];\n    } else if (step === 2) {\n      fieldsToValidate = [\"location\", \"ranking\", \"specialization\"];\n    }\n\n    const isValid = await form.trigger(fieldsToValidate);\n    if (isValid) {\n      setStep(step + 1);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-primary/10 to-background py-12\">\n          <div className=\"container mx-auto px-6\">\n            <Button\n              asChild\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"mb-4\"\n              data-testid=\"button-back\"\n            >\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n              Player Application\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Join GameSetMatch and connect with sponsors for your tennis\n              journey\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-12 max-w-3xl\">\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-2\">\n              {[1, 2, 3].map((s) => (\n                <div\n                  key={s}\n                  className={`flex-1 h-2 rounded-full mx-1 ${\n                    s <= step ? \"bg-primary\" : \"bg-muted\"\n                  }`}\n                />\n              ))}\n            </div>\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Step {step} of 3\n            </p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {step === 1 && (\n                <Card className=\"p-6\">\n                  <h2 className=\"text-2xl font-bold text-card-foreground mb-6\">\n                    Account Information\n                  </h2>\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"your.email@example.com\"\n                              data-testid=\"input-email\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              data-testid=\"input-password\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Your full name\"\n                              data-testid=\"input-fullname\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"age\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Age</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"Your age\"\n                              data-testid=\"input-age\"\n                              {...field}\n                              onChange={(e) =>\n                                field.onChange(\n                                  parseInt(e.target.value) || undefined,\n                                )\n                              }\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Country</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., United States, Spain, Australia\"\n                              data-testid=\"input-country\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </Card>\n              )}\n\n              {step === 2 && (\n                <Card className=\"p-6\">\n                  <h2 className=\"text-2xl font-bold text-card-foreground mb-6\">\n                    Player Profile\n                  </h2>\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"City, Country\"\n                              data-testid=\"input-location\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"ranking\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Current Ranking (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., 234\"\n                              data-testid=\"input-ranking\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"specialization\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Specialization</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Clay Court, Hard Court, Grass Court\"\n                              data-testid=\"input-specialization\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </Card>\n              )}\n\n              {step === 3 && (\n                <Card className=\"p-6\">\n                  <h2 className=\"text-2xl font-bold text-card-foreground mb-6\">\n                    About You\n                  </h2>\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"bio\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Your Story</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Tell sponsors about your tennis journey, goals, and why you need support...\"\n                              className=\"min-h-[150px]\"\n                              data-testid=\"input-bio\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"fundingGoals\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>What are you raising funds for?</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"e.g., Travel to ATP Challenger series, new equipment, coaching, tournament entry fees...\"\n                              className=\"min-h-[100px]\"\n                              data-testid=\"input-funding-goals\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"videoUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Video Link (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"url\"\n                              placeholder=\"YouTube or Vimeo link of you playing\"\n                              data-testid=\"input-video-url\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"atpProfileUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ATP/ITF Profile URL (Optional)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"url\"\n                              placeholder=\"https://www.atptour.com/en/players/...\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Link to your ATP Tour, ITF Tennis, or WTA profile\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"photo\"\n                      render={({ field: { value, onChange, ...field } }) => (\n                        <FormItem>\n                          <FormLabel>Profile Photo</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"file\"\n                              accept=\"image/jpeg,image/jpg,image/png,image/gif\"\n                              onChange={(e) => {\n                                const file = e.target.files?.[0];\n                                if (file) {\n                                  if (file.size > 5 * 1024 * 1024) {\n                                    alert(\"File size must be less than 5MB\");\n                                    e.target.value = \"\";\n                                    return;\n                                  }\n                                  onChange(file);\n                                }\n                              }}\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Upload a professional photo (JPG, PNG, GIF - max\n                            5MB)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </Card>\n              )}\n\n              <div className=\"flex justify-between gap-4\">\n                {step > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setStep(step - 1)}\n                    data-testid=\"button-previous\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Previous\n                  </Button>\n                )}\n                {step < 3 ? (\n                  <Button\n                    type=\"button\"\n                    onClick={nextStep}\n                    className=\"ml-auto\"\n                    data-testid=\"button-next\"\n                  >\n                    Next\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                ) : (\n                  <Button\n                    type=\"submit\"\n                    className=\"ml-auto\"\n                    data-testid=\"button-submit\"\n                  >\n                    Submit Application\n                  </Button>\n                )}\n              </div>\n            </form>\n          </Form>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17837},"client/src/pages/AdminDashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport {\n  Shield,\n  CheckCircle,\n  XCircle,\n  Mail,\n  MapPin,\n  Trophy,\n  LogOut,\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Footer from \"@/components/Footer\";\n\ninterface Player {\n  id: string;\n  fullName: string;\n  email: string;\n  age: number;\n  country: string;\n  location: string;\n  ranking?: string;\n  specialization: string;\n  bio: string;\n  approvalStatus: \"pending\" | \"approved\" | \"rejected\";\n  published: boolean;\n  createdAt: string;\n}\n\nexport default function AdminDashboard() {\n  const { player, isLoading, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || !player?.isAdmin)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You don't have admin access.\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/\");\n    }\n  }, [isLoading, isAuthenticated, player, setLocation, toast]);\n\n  const { data: players, isLoading: playersLoading } = useQuery<Player[]>({\n    queryKey: [\"/api/admin/players\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/admin/players\");\n      if (!res.ok) throw new Error(\"Failed to fetch players\");\n      return res.json();\n    },\n    enabled: !!player?.isAdmin,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (playerId: string) => {\n      const res = await fetch(`/api/admin/players/${playerId}/approve`, {\n        method: \"POST\",\n      });\n      if (!res.ok) throw new Error(\"Failed to approve player\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/players\"] });\n      toast({\n        title: \"Player Approved\",\n        description: \"Player has been approved successfully.\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (playerId: string) => {\n      const res = await fetch(`/api/admin/players/${playerId}/reject`, {\n        method: \"POST\",\n      });\n      if (!res.ok) throw new Error(\"Failed to reject player\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/players\"] });\n      toast({\n        title: \"Player Rejected\",\n        description: \"Player has been rejected.\",\n      });\n    },\n  });\n  const deactivateMutation = useMutation({\n    mutationFn: async (playerId: string) => {\n      const res = await fetch(`/api/admin/players/${playerId}/deactivate`, {\n        method: \"POST\",\n      });\n      if (!res.ok) throw new Error(\"Failed to deactivate\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/players\"] });\n      toast({ title: \"Player deactivated\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (playerId: string) => {\n      const res = await fetch(`/api/admin/players/${playerId}`, {\n        method: \"DELETE\",\n      });\n      if (!res.ok) throw new Error(\"Failed to delete\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/players\"] });\n      toast({ title: \"Player deleted\" });\n    },\n  });\n  const activateMutation = useMutation({\n    mutationFn: async (playerId: string) => {\n      const res = await fetch(`/api/admin/players/${playerId}/activate`, {\n        method: \"POST\",\n      });\n      if (!res.ok) throw new Error(\"Failed to activate\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/players\"] });\n      toast({ title: \"Player activated\" });\n    },\n  });\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(\"/api/auth/logout\", { method: \"POST\" });\n      if (!res.ok) throw new Error(\"Logout failed\");\n      return res.json();\n    },\n    onSuccess: () => {\n      // Set to null first\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n\n      // Then invalidate\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n\n      toast({ title: \"Signed out successfully\" });\n      setLocation(\"/\");\n    },\n  });\n\n  if (isLoading || !player?.isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  const pendingPlayers =\n    players?.filter((p) => p.approvalStatus === \"pending\") || [];\n  const approvedPlayers =\n    players?.filter((p) => p.approvalStatus === \"approved\") || [];\n  const activeApprovedPlayers = approvedPlayers.filter(\n    (p) => p.active !== false,\n  );\n  const inactiveApprovedPlayers = approvedPlayers.filter(\n    (p) => p.active === false,\n  );\n  const rejectedPlayers =\n    players?.filter((p) => p.approvalStatus === \"rejected\") || [];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-red-50 to-background dark:from-red-950/20 py-12\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                  <h1 className=\"text-4xl font-bold text-foreground\">\n                    Admin Dashboard\n                  </h1>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Manage player applications and approvals\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button asChild variant=\"outline\">\n                  <Link href=\"/dashboard\">My Dashboard</Link>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => logoutMutation.mutate()}\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-12\">\n          {/* Stats Cards */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-12\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-4xl font-bold text-foreground\">\n                    {players?.length || 0}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Players</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card className=\"border-orange-200 bg-orange-50 dark:bg-orange-950/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-4xl font-bold text-orange-600\">\n                    {pendingPlayers.length}\n                  </p>\n                  <p className=\"text-sm text-orange-600\">Pending Approval</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card className=\"border-green-200 bg-green-50 dark:bg-green-950/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-4xl font-bold text-green-600\">\n                    {approvedPlayers.length}\n                  </p>\n                  <p className=\"text-sm text-green-600\">Approved</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-4xl font-bold text-red-600\">\n                    {rejectedPlayers.length}\n                  </p>\n                  <p className=\"text-sm text-red-600\">Rejected</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pending Players */}\n          {pendingPlayers.length > 0 && (\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl flex items-center gap-2\">\n                  <span className=\"inline-flex h-3 w-3 rounded-full bg-orange-500 animate-pulse\"></span>\n                  Pending Approvals ({pendingPlayers.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {pendingPlayers.map((p) => (\n                    <Card key={p.id} className=\"border-orange-200\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-start gap-4\">\n                              <div className=\"flex-1\">\n                                <h3 className=\"text-xl font-bold mb-2\">\n                                  {p.fullName}\n                                </h3>\n                                <div className=\"grid md:grid-cols-2 gap-2 text-sm text-muted-foreground mb-3\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Mail className=\"h-4 w-4\" />\n                                    {p.email}\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <MapPin className=\"h-4 w-4\" />\n                                    {p.location}\n                                  </div>\n                                  <div>Age: {p.age}</div>\n                                  <div>Country: {p.country}</div>\n                                  {p.ranking && (\n                                    <div className=\"flex items-center gap-2\">\n                                      <Trophy className=\"h-4 w-4\" />\n                                      Ranking: {p.ranking}\n                                    </div>\n                                  )}\n                                  <div>Specialization: {p.specialization}</div>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                                  {p.bio}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => approveMutation.mutate(p.id)}\n                              disabled={approveMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-2\" />\n                              Approve\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => rejectMutation.mutate(p.id)}\n                              disabled={rejectMutation.isPending}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-2\" />\n                              Reject\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Active Players */}\n          {activeApprovedPlayers.length > 0 && (\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">\n                  Active Players ({activeApprovedPlayers.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {activeApprovedPlayers.map((p) => (\n                    <Card\n                      key={p.id}\n                      className=\"border-green-200 bg-green-50/50\"\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-bold\">{p.fullName}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {p.email}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className=\"bg-green-600\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Approved\n                            </Badge>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => deactivateMutation.mutate(p.id)}\n                            >\n                              Deactivate\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => {\n                                if (\n                                  confirm(\"Delete this player permanently?\")\n                                ) {\n                                  deleteMutation.mutate(p.id);\n                                }\n                              }}\n                            >\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Inactive Players */}\n          {inactiveApprovedPlayers.length > 0 && (\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-gray-500\">\n                  Inactive Players ({inactiveApprovedPlayers.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {inactiveApprovedPlayers.map((p) => (\n                    <Card\n                      key={p.id}\n                      className=\"border-gray-300 bg-gray-100 opacity-60\"\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-bold text-gray-600\">\n                              {p.fullName}\n                            </h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {p.email}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"secondary\">Inactive</Badge>\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => activateMutation.mutate(p.id)}\n                            >\n                              Activate\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => {\n                                if (\n                                  confirm(\"Delete this player permanently?\")\n                                ) {\n                                  deleteMutation.mutate(p.id);\n                                }\n                              }}\n                            >\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Rejected Players */}\n          {rejectedPlayers.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">\n                  Rejected Players ({rejectedPlayers.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {rejectedPlayers.map((p) => (\n                    <Card\n                      key={p.id}\n                      className=\"border-red-200 bg-red-50/50 dark:bg-red-950/10\"\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-bold\">{p.fullName}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {p.email}\n                            </p>\n                          </div>\n                          <Badge variant=\"destructive\">\n                            <XCircle className=\"h-3 w-3 mr-1\" />\n                            Rejected\n                          </Badge>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18295},"client/src/pages/ForgotPassword.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/Footer\";\nimport { Mail } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/auth/forgot-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to send reset email\");\n      }\n\n      setIsSubmitted(true);\n      toast({\n        title: \"Email Sent\",\n        description: \"If an account exists with that email, a reset link has been sent.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process password reset request. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-b from-primary/10 to-background py-12\">\n        <div className=\"w-full max-w-md px-6\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n              <Mail className=\"h-8 w-8 text-primary\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n              Forgot Password?\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Enter your email and we'll send you a reset link\n            </p>\n          </div>\n\n          <Card className=\"p-8\">\n            {!isSubmitted ? (\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    data-testid=\"input-forgot-password-email\"\n                    required\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"your.email@example.com\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-send-reset-link\"\n                >\n                  {isSubmitting ? \"Sending...\" : \"Send Reset Link\"}\n                </Button>\n\n                <div className=\"text-center\">\n                  <Link href=\"/signin\" className=\"text-sm text-primary hover:underline\">\n                    Back to Sign In\n                  </Link>\n                </div>\n              </form>\n            ) : (\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-foreground\">\n                  If an account exists with <strong>{email}</strong>, you will receive a password reset email shortly.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Please check your inbox and spam folder.\n                </p>\n                <Button asChild variant=\"outline\" className=\"w-full\">\n                  <Link href=\"/signin\">Return to Sign In</Link>\n                </Button>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4025},"client/src/pages/ResetPassword.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/Footer\";\nimport { Lock, CheckCircle } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function ResetPassword() {\n  const [, navigate] = useLocation();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [token, setToken] = useState(\"\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Get token from URL\n    const params = new URLSearchParams(window.location.search);\n    const resetToken = params.get(\"token\");\n    if (resetToken) {\n      setToken(resetToken);\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Invalid reset link\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => navigate(\"/signin\"), 2000);\n    }\n  }, [navigate, toast]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (password.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 8 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/auth/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ token, password }),\n        credentials: \"include\",\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Failed to reset password\");\n      }\n\n      setIsSuccess(true);\n      toast({\n        title: \"Success\",\n        description: \"Your password has been reset successfully\",\n      });\n\n      setTimeout(() => navigate(\"/signin\"), 2000);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-b from-primary/10 to-background py-12\">\n        <div className=\"w-full max-w-md px-6\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n              {isSuccess ? (\n                <CheckCircle className=\"h-8 w-8 text-primary\" />\n              ) : (\n                <Lock className=\"h-8 w-8 text-primary\" />\n              )}\n            </div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n              {isSuccess ? \"Password Reset!\" : \"Reset Password\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isSuccess\n                ? \"Redirecting you to sign in...\"\n                : \"Enter your new password below\"}\n            </p>\n          </div>\n\n          <Card className=\"p-8\">\n            {!isSuccess ? (\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"password\">New Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    data-testid=\"input-new-password\"\n                    required\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"Enter new password (min 8 characters)\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    data-testid=\"input-confirm-password\"\n                    required\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    placeholder=\"Confirm your new password\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-reset-password\"\n                >\n                  {isSubmitting ? \"Resetting...\" : \"Reset Password\"}\n                </Button>\n\n                <div className=\"text-center\">\n                  <Link href=\"/signin\" className=\"text-sm text-primary hover:underline\">\n                    Back to Sign In\n                  </Link>\n                </div>\n              </form>\n            ) : (\n              <div className=\"text-center space-y-4\">\n                <p className=\"text-foreground\">\n                  Your password has been successfully reset.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  You can now sign in with your new password.\n                </p>\n                <Button asChild className=\"w-full\">\n                  <Link href=\"/signin\">Go to Sign In</Link>\n                </Button>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5970},"client/src/pages/Contact.tsx":{"content":"import { ArrowLeft } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/Footer\";\nimport { Mail, Phone, MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    message: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to send message\");\n      }\n\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for contacting us. We'll get back to you soon.\",\n      });\n\n      setFormData({ name: \"\", email: \"\", phone: \"\", message: \"\" });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-primary/10 to-background py-20\">\n          <div className=\"container mx-auto px-6 text-center\">\n            <Button asChild variant=\"ghost\" size=\"sm\" className=\"mb-4\">\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            <h1 className=\"text-5xl md:text-6xl font-bold text-foreground mb-6\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Have questions about GameSetMatch? We'd love to hear from you.\n              Send us a message and we'll respond as soon as possible.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-16\">\n          <div className=\"grid md:grid-cols-2 gap-12 max-w-5xl mx-auto\">\n            <div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-6\">\n                Get in Touch\n              </h2>\n              <p className=\"text-muted-foreground mb-8\">\n                Whether you're a player looking to get sponsored or a sponsor\n                wanting to support tennis talent, we're here to help answer your\n                questions.\n              </p>\n\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-full bg-primary/10\">\n                    <Mail className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-1\">\n                      Email\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      suvirabeer@gmail.com\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-full bg-primary/10\">\n                    <Phone className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-1\">\n                      Phone\n                    </h3>\n                    <p className=\"text-muted-foreground\">We'll add this soon</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-full bg-primary/10\">\n                    <MapPin className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-foreground mb-1\">\n                      Location\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      Serving players worldwide\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Card className=\"p-8\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    data-testid=\"input-contact-name\"\n                    required\n                    value={formData.name}\n                    onChange={(e) =>\n                      setFormData({ ...formData, name: e.target.value })\n                    }\n                    placeholder=\"Your full name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    data-testid=\"input-contact-email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) =>\n                      setFormData({ ...formData, email: e.target.value })\n                    }\n                    placeholder=\"your.email@example.com\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    data-testid=\"input-contact-phone\"\n                    value={formData.phone}\n                    onChange={(e) =>\n                      setFormData({ ...formData, phone: e.target.value })\n                    }\n                    placeholder=\"+1 (555) 123-4567\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"message\">Message *</Label>\n                  <Textarea\n                    id=\"message\"\n                    data-testid=\"textarea-contact-message\"\n                    required\n                    value={formData.message}\n                    onChange={(e) =>\n                      setFormData({ ...formData, message: e.target.value })\n                    }\n                    placeholder=\"Tell us how we can help you...\"\n                    rows={6}\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-contact-submit\"\n                >\n                  {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </Card>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7334},"client/src/pages/AutoSignin.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function AutoSignin() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    async function signin() {\n      try {\n        console.log(\"Attempting signin...\");\n        const res = await fetch(\"/api/auth/signin\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            email: \"test@admin.com\",\n            password: \"test123\"\n          }),\n        });\n\n        console.log(\"Response status:\", res.status);\n        \n        if (res.ok) {\n          console.log(\"Signin successful!\");\n          await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n          setLocation(\"/dashboard\");\n        } else {\n          const error = await res.json();\n          console.error(\"Signin failed:\", error);\n          alert(\"Signin failed: \" + JSON.stringify(error));\n        }\n      } catch (error) {\n        console.error(\"Exception:\", error);\n        alert(\"Error: \" + error);\n      }\n    }\n\n    signin();\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold mb-4\">Signing you in...</h1>\n        <p className=\"text-muted-foreground\">Please wait</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1434},"client/src/pages/FAQ.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport Footer from \"@/components/Footer\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, ChevronDown } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function FAQ() {\n  const [openIndex, setOpenIndex] = useState<number | null>(null);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  const faqs = [\n    {\n      question: \"Who can join as a player?\",\n      answer:\n        \"Any tennis player competing at ATP, Challenger, ITF, or college level can join. Players must be at least 13 years old and actively competing in tournaments.\",\n    },\n    {\n      question: \"How much does it cost for players?\",\n      answer:\n        \"It's completely FREE for players to create a profile and connect with sponsors. We don't charge any membership fees or take a percentage of sponsorships.\",\n    },\n    {\n      question: \"What types of sponsorship are available?\",\n      answer:\n        \"Sponsors can provide travel expenses, equipment (rackets, strings, shoes), monthly training stipends, tournament entry fees, or one-time contributions for specific needs.\",\n    },\n    {\n      question: \"Do sponsors need to sign up?\",\n      answer:\n        \"No, sponsors can browse player profiles without creating an account. However, signing up allows sponsors to manage multiple sponsorships and receive updates from players.\",\n    },\n    {\n      question: \"Is my payment information secure?\",\n      answer:\n        \"Yes, all payments are processed through Stripe, a secure payment platform used by millions of businesses worldwide. We never store your payment details on our servers.\",\n    },\n    {\n      question: \"Can I sponsor multiple players?\",\n      answer:\n        \"Absolutely! You can sponsor as many players as you'd like. Many sponsors support multiple athletes at different competitive levels.\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"flex-1\">\n        <div className=\"bg-gradient-to-b from-primary/10 to-background py-12\">\n          <div className=\"container mx-auto px-6\">\n            <Button asChild variant=\"ghost\" size=\"sm\" className=\"mb-4\">\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n              Frequently Asked Questions\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Find answers to common questions about GameSetMatch\n            </p>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-12 max-w-3xl\">\n          <div className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <div key={index} className=\"border rounded-lg overflow-hidden\">\n                <button\n                  onClick={() =>\n                    setOpenIndex(openIndex === index ? null : index)\n                  }\n                  className=\"w-full px-6 py-4 text-left flex items-center justify-between hover:bg-muted/50 transition-colors\"\n                >\n                  <span className=\"font-semibold text-lg\">{faq.question}</span>\n                  <ChevronDown\n                    className={`h-5 w-5 transition-transform ${\n                      openIndex === index ? \"transform rotate-180\" : \"\"\n                    }`}\n                  />\n                </button>\n                {openIndex === index && (\n                  <div className=\"px-6 py-4 bg-muted/20 border-t\">\n                    <p className=\"text-muted-foreground\">{faq.answer}</p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-12 text-center p-8 bg-primary/5 rounded-lg\">\n            <h3 className=\"text-xl font-bold mb-2\">Still have questions?</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              We're here to help! Contact our support team.\n            </p>\n            <Button asChild>\n              <Link href=\"/contact\">Contact Us</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4240},"server/seed.ts":{"content":"import { db } from './db';\nimport { players } from '../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcrypt';\n\nasync function seed() {\n  try {\n    console.log('Seeding database...\\n');\n    \n    // Create admin account\n    const userEmail = 'sudhirmalin@gmail.com';\n    const existing = await db.select().from(players).where(eq(players.email, userEmail));\n    if (existing.length > 0) {\n      await db.delete(players).where(eq(players.email, userEmail));\n    }\n    \n    const userHash = await bcrypt.hash('admin123', 10);\n    await db.insert(players).values({\n      email: userEmail,\n      passwordHash: userHash,\n      fullName: 'Sudhir Malin',\n      age: 30,\n      country: 'India',\n      location: 'India',\n      ranking: 'N/A',\n      specialization: 'Platform Admin',\n      bio: 'Platform Administrator',\n      fundingGoals: 'N/A',\n      isAdmin: true,\n      approvalStatus: 'approved',\n      published: false\n    });\n    \n    console.log('✓ Admin account created');\n    \n    // Create sample players\n    const samplePlayers = [\n      {\n        email: 'player1@example.com',\n        fullName: 'Alex Rodriguez',\n        age: 22,\n        country: 'Spain',\n        location: 'Barcelona, Spain',\n        ranking: 'ATP 250',\n        specialization: 'Singles - Clay Court',\n        bio: 'Professional tennis player specializing in clay court tournaments.',\n        fundingGoals: 'Travel and accommodation for European tour'\n      },\n      {\n        email: 'player2@example.com',\n        fullName: 'Maria Santos',\n        age: 20,\n        country: 'Brazil',\n        location: 'Rio de Janeiro, Brazil',\n        ranking: 'ITF 500',\n        specialization: 'Singles - Hard Court',\n        bio: 'Rising star in South American tennis circuit.',\n        fundingGoals: 'Training equipment and tournament fees'\n      },\n      {\n        email: 'player3@example.com',\n        fullName: 'James Chen',\n        age: 24,\n        country: 'USA',\n        location: 'Los Angeles, USA',\n        ranking: 'Challenger 150',\n        specialization: 'Doubles',\n        bio: 'Experienced doubles player in North American circuit.',\n        fundingGoals: 'Travel costs and coaching fees'\n      },\n      {\n        email: 'player4@example.com',\n        fullName: 'Sophie Martin',\n        age: 19,\n        country: 'France',\n        location: 'Paris, France',\n        ranking: 'ITF 300',\n        specialization: 'Singles - Grass Court',\n        bio: 'Young talent focusing on grass court tournaments.',\n        fundingGoals: 'Tennis equipment and tournament travel'\n      }\n    ];\n    \n    for (const player of samplePlayers) {\n      const existing = await db.select().from(players).where(eq(players.email, player.email));\n      if (existing.length > 0) {\n        await db.delete(players).where(eq(players.email, player.email));\n      }\n      const hash = await bcrypt.hash('player123', 10);\n      await db.insert(players).values({\n        ...player,\n        passwordHash: hash,\n        published: true,\n        featured: true,\n        approvalStatus: 'approved',\n        isAdmin: false\n      });\n    }\n    \n    console.log('✓ Sample players created\\n');\n    console.log('==========================================');\n    console.log('Sign in with:');\n    console.log('  Email: sudhirmalin@gmail.com');\n    console.log('  Password: admin123');\n    console.log('==========================================');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Seed error:', error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":3527}},"version":2}